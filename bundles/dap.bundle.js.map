{"version":3,"names":[],"mappings":"","sources":["dap.bundle.js"],"sourcesContent":["(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.DAPjs = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.DEFAULT_RUNCODE_TIMEOUT = 10000 /* ms */;\nexports.CPUID_IMPLEMENTER_MASK = 0xff000000;\nexports.CPUID_IMPLEMENTER_POS = 24;\nexports.CPUID_VARIANT_MASK = 0x00f00000;\nexports.CPUID_VARIANT_POS = 20;\nexports.CPUID_ARCHITECTURE_MASK = 0x000f0000;\nexports.CPUID_ARCHITECTURE_POS = 16;\nexports.CPUID_PARTNO_MASK = 0x0000fff0;\nexports.CPUID_PARTNO_POS = 4;\nexports.CPUID_REVISION_MASK = 0x0000000f;\nexports.CPUID_REVISION_POS = 0;\nexports.ISANames = new Map();\nexports.ISANames.set(12 /* ARMv6M */, \"ARMv6M\");\nexports.ISANames.set(15 /* ARMv7M */, \"ARMv7M\");\nexports.CoreNames = new Map();\nexports.CoreNames.set(3104 /* CortexM0 */, \"Cortex-M0\");\nexports.CoreNames.set(3105 /* CortexM1 */, \"Cortex-M1\");\nexports.CoreNames.set(3107 /* CortexM3 */, \"Cortex-M3\");\nexports.CoreNames.set(3108 /* CortexM4 */, \"Cortex-M4\");\nexports.CoreNames.set(3168 /* CortexM0p */, \"Cortex-M0+\");\n\n\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst debug_1 = require(\"../debug/debug\");\nconst memory_1 = require(\"../memory/memory\");\nconst prepared_1 = require(\"../memory/prepared\");\nconst util_1 = require(\"../util\");\nconst constants_1 = require(\"./constants\");\nconst prepared_2 = require(\"./prepared\");\n/**\n * # Cortex M\n *\n * Manages access to a CPU core, and its associated memory and debug functionality.\n *\n * > **NOTE:** all of the methods that involve interaction with the CPU core\n * > are asynchronous, so must be `await`ed, or explicitly handled as a Promise.\n *\n * ## Usage\n *\n * First, let's create an instance of `CortexM`, using an associated _Debug Access\n * Port_ (DAP) instance that we created earlier.\n *\n * ```typescript\n * const core = new CortexM(dap);\n * ```\n *\n * Now, we can halt and resume the core just like this:\n *\n * > **NOTE:** If you're not using ES2017, you can replace the use of `async` and\n * > `await` with direct use of Promises. These examples also need to be run within\n * > an `async` function for `async` to be used.\n *\n * ```typescript\n * await core.halt();\n * await core.resume();\n * ```\n *\n * Resetting the core is just as easy:\n *\n * ```typescript\n * await core.reset();\n * ```\n *\n * You can even halt immediately after reset:\n *\n * ```typescript\n * await core.reset(true);\n * ```\n *\n * We can also read and write 32-bit values to/from core registers:\n *\n * ```typescript\n * const sp = await core.readCoreRegister(CortexReg.SP);\n *\n * await core.writeCoreRegister(CortexReg.R0, 0x1000);\n * await core.writeCoreRegister(CortexReg.PC, 0x1234);\n * ```\n *\n * ### See also\n *\n * For details on debugging and memory features, see the documentation for\n * `Debug` and `Memory`.\n */\nclass CortexM {\n    constructor(device) {\n        this.dev = device;\n        this.memory = new memory_1.Memory(device);\n        this.debug = new debug_1.Debug(this);\n    }\n    /**\n     * Initialise the debug access port on the device, and read the device type.\n     */\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dev.init();\n            // FIXME: don't run this if security is enabled on the K64F\n            yield this.debug.init();\n            yield this.readCoreType();\n        });\n    }\n    /**\n     * Read the current state of the CPU.\n     *\n     * @returns A member of the `CoreState` enum corresponding to the current status of the CPU.\n     */\n    getState() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            if (dhcsr & 33554432 /* S_RESET_ST */) {\n                const newDHCSR = yield this.memory.read32(3758157296 /* DHCSR */);\n                if (newDHCSR & 33554432 /* S_RESET_ST */ && !(newDHCSR & 16777216 /* S_RETIRE_ST */)) {\n                    return 0 /* TARGET_RESET */;\n                }\n            }\n            if (dhcsr & 524288 /* S_LOCKUP */) {\n                return 1 /* TARGET_LOCKUP */;\n            }\n            else if (dhcsr & 262144 /* S_SLEEP */) {\n                return 2 /* TARGET_SLEEPING */;\n            }\n            else if (dhcsr & 131072 /* S_HALT */) {\n                return 3 /* TARGET_HALTED */;\n            }\n            else {\n                return 4 /* TARGET_RUNNING */;\n            }\n        });\n    }\n    /**\n     * Read the CPUID register from the CPU, and interpret its meaning in terms of implementer,\n     * architecture and core type.\n     */\n    readCoreType() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const cpuid = yield this.memory.read32(3758157056 /* CPUID */);\n            const implementer = ((cpuid & constants_1.CPUID_IMPLEMENTER_MASK) >> constants_1.CPUID_IMPLEMENTER_POS);\n            const arch = ((cpuid & constants_1.CPUID_ARCHITECTURE_MASK) >> constants_1.CPUID_ARCHITECTURE_POS);\n            const coreType = ((cpuid & constants_1.CPUID_PARTNO_MASK) >> constants_1.CPUID_PARTNO_POS);\n            return [implementer, arch, coreType];\n        });\n    }\n    prepareCommand() {\n        return new prepared_2.PreparedCortexMCommand(this.dev);\n    }\n    /**\n     * Read a core register from the CPU (e.g. r0...r15, pc, sp, lr, s0...)\n     *\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\n     */\n    readCoreRegister(no) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.memory.write32(3758157300 /* DCRSR */, no);\n            const v = yield this.memory.read32(3758157296 /* DHCSR */);\n            util_1.assert(v & 65536 /* S_REGRDY */);\n            return yield this.memory.read32(3758157304 /* DCRDR */);\n        });\n    }\n    /**\n     * Write a 32-bit word to the specified CPU general-purpose register.\n     *\n     * @param no Member of the `CortexReg` enum - an ARM Cortex CPU general-purpose register.\n     * @param val Value to be written.\n     */\n    writeCoreRegister(no, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = new prepared_1.PreparedMemoryCommand(this.dev);\n            prep.write32(3758157304 /* DCRDR */, val);\n            prep.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\n            prep.read32(3758157296 /* DHCSR */);\n            const v = (yield prep.go())[0];\n            util_1.assert(v & 65536 /* S_REGRDY */);\n        });\n    }\n    /**\n     * Halt the CPU core.\n     */\n    halt() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\n        });\n    }\n    /**\n     * Resume the CPU core.\n     */\n    resume() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (yield this.isHalted()) {\n                yield this.memory.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\n                yield this.debug.enable();\n            }\n        });\n    }\n    /**\n     * Find out whether the CPU is halted.\n     */\n    isHalted() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const s = yield this.status();\n            return s.isHalted;\n        });\n    }\n    /**\n     * Read the current status of the CPU.\n     *\n     * @returns Object containing the contents of the `DHCSR` register, the `DFSR` register, and a boolean value\n     * stating the current halted state of the CPU.\n     */\n    status() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = new prepared_1.PreparedMemoryCommand(this.dev);\n            prep.read32(3758157296 /* DHCSR */);\n            prep.read32(3758157104 /* DFSR */);\n            const results = yield prep.go();\n            const dhcsr = results[0];\n            const dfsr = results[1];\n            return {\n                dfsr,\n                dhscr: dhcsr,\n                isHalted: !!(dhcsr & 131072 /* S_HALT */),\n            };\n        });\n    }\n    /**\n     * Reset the CPU core. This currently does a software reset - it is also technically possible to perform a 'hard'\n     * reset using the reset pin from the debugger.\n     */\n    reset(halt = false) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (halt) {\n                yield this.halt();\n                // VC_CORERESET causes the core to halt on reset.\n                const demcr = yield this.memory.read32(3758157308 /* DEMCR */);\n                yield this.memory.write32(3758157308 /* DEMCR */, demcr | 1 /* DEMCR_VC_CORERESET */);\n                yield this.softwareReset();\n                yield this.waitForHalt();\n                // Unset the VC_CORERESET bit\n                yield this.memory.write32(3758157308 /* DEMCR */, demcr);\n            }\n            else {\n                yield this.softwareReset();\n            }\n        });\n    }\n    /**\n     * Run specified machine code natively on the device. Assumes usual C calling conventions\n     * - returns the value of r0 once the program has terminated. The program _must_ terminate\n     * in order for this function to return. This can be achieved by placing a `bkpt`\n     * instruction at the end of the function.\n     *\n     * @param code array containing the machine code (32-bit words).\n     * @param address memory address at which to place the code.\n     * @param pc initial value of the program counter.\n     * @param lr initial value of the link register.\n     * @param sp initial value of the stack pointer.\n     * @param upload should we upload the code before running it.\n     * @param args set registers r0...rn before running code\n     *\n     * @returns A promise for the value of r0 on completion of the function call.\n     */\n    runCode(code, address, pc, lr, sp, upload, ...args) {\n        return __awaiter(this, void 0, void 0, function* () {\n            // await this.halt();\n            const cmd = this.prepareCommand();\n            cmd.halt();\n            // Point the program counter to the start of the program\n            cmd.writeCoreRegister(15 /* PC */, pc);\n            cmd.writeCoreRegister(14 /* LR */, lr);\n            cmd.writeCoreRegister(13 /* SP */, sp);\n            for (let i = 0; i < args.length; i++) {\n                cmd.writeCoreRegister(i, args[i]);\n            }\n            yield cmd.go();\n            // Write the program to memory at the specified address\n            if (upload) {\n                yield this.memory.writeBlock(address, code);\n            }\n            // Run the program and wait for halt\n            yield this.resume();\n            yield this.waitForHalt(constants_1.DEFAULT_RUNCODE_TIMEOUT); // timeout after 10s\n            return yield this.readCoreRegister(0 /* R0 */);\n        });\n    }\n    /**\n     * Spin until the chip has halted.\n     */\n    waitForHalt(timeout = 0) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return new Promise((resolve, reject) => __awaiter(this, void 0, void 0, function* () {\n                let running = true;\n                if (timeout > 0) {\n                    setTimeout(() => {\n                        reject(\"waitForHalt timed out.\");\n                        running = false;\n                    }, timeout);\n                }\n                while (running && !(yield this.isHalted())) {\n                    /* empty */\n                }\n                if (running) {\n                    resolve();\n                }\n            }));\n        });\n    }\n    softwareReset() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.memory.write32(3758157068 /* NVIC_AIRCR */, 100270080 /* NVIC_AIRCR_VECTKEY */ | 4 /* NVIC_AIRCR_SYSRESETREQ */);\n            // wait for the system to come out of reset\n            let dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            while ((dhcsr & 33554432 /* S_RESET_ST */) !== 0) {\n                dhcsr = yield this.memory.read32(3758157296 /* DHCSR */);\n            }\n        });\n    }\n}\nexports.CortexM = CortexM;\n\n\n\n},{\"../debug/debug\":7,\"../memory/memory\":8,\"../memory/prepared\":9,\"../util\":17,\"./constants\":1,\"./prepared\":3}],3:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prepared_1 = require(\"../memory/prepared\");\n/**\n * # Cortex M: Prepared Command\n *\n * Allows batching of Cortex M-related commands, such as writing to a register,\n * halting and resuming the core.\n *\n * ## Example\n *\n * When preparing the sequence of commands, we can use the same API to prepare\n * a command as we would to execute them immediately.\n *\n * ```typescript\n * // Note that only the .go method is asynchronous.\n *\n * const prep = core.prepareCommand();\n * prep.writeCoreRegister(CortexReg.R0, 0x1000);\n * prep.writeCoreRegister(CortexReg.R1, 0x0);\n * prep.writeCoreRegister(CortexReg.PC, 0x2000000);\n * prep.resume();\n * ```\n *\n * We can then execute them as efficiently as possible by combining them together\n * and executing them like so.\n *\n * ```typescript\n * await prep.go();\n * ```\n *\n * The code above is equivalent to the following _non-prepared_ command:\n *\n * ```typescript\n * await core.writeCoreRegister(CortexReg.R0, 0x1000);\n * await core.writeCoreRegister(CortexReg.R1, 0x0);\n * await core.writeCoreRegister(CortexReg.PC, 0x2000000);\n * await core.resume();\n * ```\n *\n * Since the batched version of this code avoids making three round-trips to the\n * target, we are able to significantly improve performance. This is especially\n * noticable when uploading a binary to flash memory, where are large number of\n * repetetive commands are being used.\n *\n * ## Explanation\n *\n * For a detailed explanation of why prepared commands are used in DAP.js, see the\n * documentation for `PreparedDapCommand`.\n */\nclass PreparedCortexMCommand {\n    constructor(dap) {\n        this.cmd = new prepared_1.PreparedMemoryCommand(dap);\n    }\n    /**\n     * Schedule a 32-bit integer to be written to a core register.\n     *\n     * @param no Core register to be written.\n     * @param val Value to write.\n     */\n    writeCoreRegister(no, val) {\n        this.cmd.write32(3758157304 /* DCRDR */, val);\n        this.cmd.write32(3758157300 /* DCRSR */, no | 65536 /* DCRSR_REGWnR */);\n    }\n    /**\n     * Schedule a halt command to be written to the CPU.\n     */\n    halt() {\n        this.cmd.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */ | 2 /* C_HALT */);\n    }\n    /**\n     * Schedule a resume command to be written to the CPU.\n     */\n    resume() {\n        this.cmd.write32(3758157104 /* DFSR */, 4 /* DFSR_DWTTRAP */ | 2 /* DFSR_BKPT */ | 1 /* DFSR_HALTED */);\n    }\n    /**\n     * Execute all scheduled commands.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.cmd.go();\n        });\n    }\n}\nexports.PreparedCortexMCommand = PreparedCortexMCommand;\n\n\n\n},{\"../memory/prepared\":9}],4:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst prepared_1 = require(\"./prepared\");\nconst cmsis_dap_1 = require(\"../transport/cmsis_dap\");\nconst util_1 = require(\"../util\");\nclass DAP {\n    // private idcode: number;\n    constructor(device) {\n        this.device = device;\n        this.dap = new cmsis_dap_1.CMSISDAP(device);\n    }\n    reconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dap.disconnect();\n            yield util_1.delay(100);\n            yield this.init();\n        });\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.dap.connect();\n            yield this.readDp(0 /* IDCODE */);\n            // const n = await this.readDp(Reg.IDCODE);\n            // this.idcode = n;\n            let prep = this.prepareCommand();\n            prep.writeReg(0 /* DP_0x0 */, 1 << 2); // clear sticky error\n            prep.writeDp(2 /* SELECT */, 0);\n            prep.writeDp(1 /* CTRL_STAT */, 1073741824 /* CSYSPWRUPREQ */ | 268435456 /* CDBGPWRUPREQ */);\n            const m = 536870912 /* CDBGPWRUPACK */ | 2147483648 /* CSYSPWRUPACK */;\n            prep.readDp(1 /* CTRL_STAT */);\n            let v = (yield prep.go())[0];\n            while ((v & m) !== m) {\n                v = yield this.readDp(1 /* CTRL_STAT */);\n            }\n            prep = this.prepareCommand();\n            prep.writeDp(1 /* CTRL_STAT */, (1073741824 /* CSYSPWRUPREQ */ |\n                268435456 /* CDBGPWRUPREQ */ |\n                0 /* TRNNORMAL */ |\n                3840 /* MASKLANE */));\n            prep.writeDp(2 /* SELECT */, 0);\n            prep.readAp(252 /* IDR */);\n            yield prep.go();\n        });\n    }\n    writeReg(regId, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.regOp(regId, val);\n        });\n    }\n    readReg(regId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.regOp(regId, null);\n            const v = util_1.readUInt32LE(buf, 3);\n            return v;\n        });\n    }\n    prepareCommand() {\n        return new prepared_1.PreparedDapCommand(this.dap);\n    }\n    readDp(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.readReg(addr);\n        });\n    }\n    readAp(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.prepareCommand();\n            prep.writeDp(2 /* SELECT */, util_1.bank(addr));\n            prep.readReg(util_1.apReg(addr, 2 /* READ */));\n            return (yield prep.go())[0];\n        });\n    }\n    writeDp(addr, data) {\n        if (addr === 2 /* SELECT */) {\n            if (data === this.dpSelect) {\n                return Promise.resolve();\n            }\n            this.dpSelect = data;\n        }\n        return this.writeReg(addr, data);\n    }\n    writeAp(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (addr === 0 /* CSW */) {\n                if (data === this.csw) {\n                    return Promise.resolve();\n                }\n                this.csw = data;\n            }\n            const prep = this.prepareCommand();\n            prep.writeDp(2 /* SELECT */, util_1.bank(addr));\n            prep.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\n            yield prep.go();\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.device.close();\n        });\n    }\n    readRegRepeat(regId, cnt) {\n        return __awaiter(this, void 0, void 0, function* () {\n            util_1.assert(cnt <= 15);\n            const request = util_1.regRequest(regId);\n            const sendargs = [0, cnt];\n            for (let i = 0; i < cnt; ++i) {\n                sendargs.push(request);\n            }\n            const buf = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\n            if (buf[1] !== cnt) {\n                throw new Error((\"(many) Bad #trans \" + buf[1]));\n            }\n            else if (buf[2] !== 1) {\n                throw new Error((\"(many) Bad transfer status \" + buf[2]));\n            }\n            return buf.subarray(3, 3 + cnt * 4);\n        });\n    }\n    writeRegRepeat(regId, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const remainingLength = 64 - 1 - 1 - 2 - 1; // 14\n            util_1.assert(data.length <= remainingLength / 4);\n            /*\n                BYTE | BYTE *****| SHORT**********| BYTE *************| WORD *********|\n              > 0x06 | DAP Index | Transfer Count | Transfer Request  | Transfer Data |\n                     |***********|****************|*******************|+++++++++++++++|\n            */\n            const request = util_1.regRequest(regId, true);\n            const sendargs = [0, data.length, 0, request];\n            data.forEach(d => {\n                // separate d into bytes\n                util_1.addInt32(sendargs, d);\n            });\n            const buf = yield this.dap.cmdNums(6 /* DAP_TRANSFER_BLOCK */, sendargs);\n            if (buf[3] !== 1) {\n                throw new Error((\"(many-wr) Bad transfer status \" + buf[2]));\n            }\n        });\n    }\n    regOp(regId, val) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = util_1.regRequest(regId, val !== null);\n            const sendargs = [0, 1, request];\n            if (val !== null) {\n                util_1.addInt32(sendargs, val);\n            }\n            const buf = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, sendargs);\n            if (buf[1] !== 1) {\n                throw new Error((\"Bad #trans \" + buf[1]));\n            }\n            else if (buf[2] !== 1) {\n                if (buf[2] === 2) {\n                    throw new Error((\"Transfer wait\"));\n                }\n                throw new Error((\"Bad transfer status \" + buf[2]));\n            }\n            return buf;\n        });\n    }\n}\nexports.DAP = DAP;\n\n\n\n},{\"../transport/cmsis_dap\":15,\"../util\":17,\"./prepared\":5}],5:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\n/**\n * # Prepared DAP Command\n *\n * Batches together multiple Debug Access Port (DAP) commands into one (or more)\n * CMSIS-DAP Transfers that can be written together to improve link utilisation.\n *\n * > **NOTE:** this will not normally need to be used by applications or libraries\n * > depending on DAP.js.\n *\n * ## Architecture\n *\n * - `PreparedDapCommand` keeps a list of CMSIS-DAP `Transfer` commands.\n * - Every time an action is scheduled (writing to or reading from a DP or AP register),\n * we check to see if there is any remaining room in the current batch, starting a new\n * batch if none is available.\n * - When `go` is called, the batches are executed sequentially (so DAP commands are\n * executed in the order they were added).\n *\n * ### Reading Values\n *\n * Writing values to registers is relatively straight forward, however mixing register\n * reads and writes together requires us to keep track of how many commands in\n * each batch are read commands.\n *\n * Once data has successfully been read back from the target, the values read are assembled\n * into an array, and returned in the order they requested. This allows `PreparedDapCommand`s\n * to be used higher up the stack in places where multiple independent read operations take\n * place sequentially.\n *\n * ### Constructing CMSIS-DAP Commands\n *\n * We keep track of the number of commands in each batch, so that we can fill in the command\n * count field of the `DAP_Transfer`.\n */\nclass PreparedDapCommand {\n    constructor(dap) {\n        this.dap = dap;\n        this.commands = [[0, 1]];\n        this.commandCounts = [0];\n        this.currentCommand = 0;\n        this.readCounts = [0];\n    }\n    /**\n     * Schedule a value to be written to an AP or DP register.\n     *\n     * @param regId register ID to be written to\n     * @param value value to be written\n     */\n    writeReg(regId, value) {\n        const request = util_1.regRequest(regId, true);\n        if (this.commands[this.currentCommand].length + 5 > 64) {\n            // start a new command\n            this.commands.push([0, 1]);\n            this.commandCounts.push(0);\n            this.readCounts.push(0);\n            this.currentCommand++;\n        }\n        this.commands[this.currentCommand].push(request);\n        util_1.addInt32(this.commands[this.currentCommand], value);\n        this.commandCounts[this.currentCommand]++;\n    }\n    /**\n     * Schedule a value to be read from an AP or DP register.\n     * @param regId register to read from\n     */\n    readReg(regId) {\n        const request = util_1.regRequest(regId, false);\n        if (this.commands[this.currentCommand].length + 1 > 64) {\n            // start a new command\n            this.commands.push([0, 1]);\n            this.commandCounts.push(0);\n            this.readCounts.push(0);\n            this.currentCommand++;\n        }\n        this.commands[this.currentCommand].push(request);\n        this.commandCounts[this.currentCommand]++;\n        this.readCounts[this.currentCommand]++;\n    }\n    /**\n     * Schedule multiple values to be written to the same register.\n     *\n     * **TODO:** figure out dynamically whether it's better to use DAP_TransferBlock vs\n     * DAP_Transfer. We should be able to fill up the remaining space in a Transfer\n     * and then start a TransferBlock _if_ we can fit in _13 or more_ values into the\n     * TransferBlock. However, the gains from this are marginal unless we're using much\n     * larger packet sizes than 64 bytes.\n     *\n     * @param regId register to write to repeatedly\n     * @param data array of 32-bit values to be written\n     */\n    writeRegRepeat(regId, data) {\n        // fill up the rest of the command we have left\n        data.forEach(cmd => {\n            this.writeReg(regId, cmd);\n        });\n    }\n    /**\n     * Asynchronously execute the commands scheduled.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v = [];\n            for (let i = 0; i < this.commands.length; i++) {\n                const command = this.commands[i];\n                command[1] = this.commandCounts[i];\n                const result = yield this.dap.cmdNums(5 /* DAP_TRANSFER */, command);\n                for (let j = 0; j < this.readCounts[i]; j++) {\n                    v.push(util_1.readUInt32LE(result, 3 + 4 * j));\n                }\n            }\n            return v;\n        });\n    }\n    /**\n     * Schedule a value to be written to a DP register\n     *\n     * @param addr Address to write to\n     * @param data Data to be written\n     */\n    writeDp(addr, data) {\n        if (addr === 2 /* SELECT */) {\n            if (data === this.dpSelect) {\n                return Promise.resolve();\n            }\n            this.dpSelect = data;\n        }\n        return this.writeReg(addr, data);\n    }\n    /**\n     * Schedule a value to be written to an AP register\n     *\n     * @param addr Address to write to\n     * @param data Data to be written\n     */\n    writeAp(addr, data) {\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\n        if (addr === 0 /* CSW */) {\n            if (data === this.csw) {\n                return Promise.resolve();\n            }\n            this.csw = data;\n        }\n        this.writeReg(util_1.apReg(addr, 0 /* WRITE */), data);\n    }\n    /**\n     * Schedule a DP register to read from\n     *\n     * @param addr Address to read from\n     */\n    readDp(addr) {\n        return this.readReg(addr);\n    }\n    /**\n     * Schedule an AP register to read from\n     *\n     * @param addr Address to read from\n     */\n    readAp(addr) {\n        this.writeDp(2 /* SELECT */, util_1.bank(addr));\n        return this.readReg(util_1.apReg(addr, 2 /* READ */));\n    }\n}\nexports.PreparedDapCommand = PreparedDapCommand;\n\n\n\n},{\"../util\":17}],6:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass HWBreakpoint {\n    constructor(regAddr, parent, addr) {\n        this.regAddr = regAddr;\n        this.parent = parent;\n        this.addr = addr;\n    }\n    set() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* set hardware breakpoint */\n            const bpMatch = ((this.addr & 0x2) ? 2 : 1) << 30;\n            yield this.parent.memory.write32(this.regAddr, this.addr & 0x1ffffffc | bpMatch | 1);\n        });\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* clear hardware breakpoint */\n            yield this.parent.memory.write32(this.regAddr, 0);\n        });\n    }\n}\nexports.HWBreakpoint = HWBreakpoint;\nclass SWBreakpoint {\n    constructor(parent, addr) {\n        this.parent = parent;\n        this.addr = addr;\n    }\n    set() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // read the instruction from the CPU...\n            this.instruction = yield this.parent.memory.read16(this.addr);\n            yield this.parent.memory.write16(this.addr, SWBreakpoint.BKPT_INSTRUCTION);\n        });\n    }\n    clear() {\n        return __awaiter(this, void 0, void 0, function* () {\n            /* clear hardware breakpoint */\n            yield this.parent.memory.write16(this.addr, this.instruction);\n        });\n    }\n}\nSWBreakpoint.BKPT_INSTRUCTION = 0xbe00;\nexports.SWBreakpoint = SWBreakpoint;\n\n\n\n},{}],7:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst breakpoint_1 = require(\"./breakpoint\");\n/**\n * # Debug Interface\n *\n * Keeps track of breakpoints set on the target, as well as deciding whether to\n * use a hardware breakpoint or a software breakpoint.\n *\n * ## Usage\n *\n * ```typescript\n * const dbg = core.debug;\n *\n * await dbg.setBreakpoint(0x123456);\n *\n * // resume the core and wait for the breakpoint\n * await core.resume();\n * await core.waitForHalt();\n *\n * // step forward one instruction\n * await dbg.step();\n *\n * // remove the breakpoint\n * await dbg.deleteBreakpoint(0x123456);\n * ```\n */\nclass Debug {\n    constructor(core) {\n        this.core = core;\n        this.enabled = false;\n        this.availableHWBreakpoints = [];\n        this.breakpoints = new Map();\n    }\n    init() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.setupFpb();\n        });\n    }\n    /**\n     * Enable debugging on the target CPU\n     */\n    enable() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ | 1 /* C_DEBUGEN */);\n        });\n    }\n    /**\n     * Set breakpoints at specified memory addresses.\n     *\n     * @param addrs An array of memory addresses at which to set breakpoints.\n     */\n    setBreakpoint(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.breakpoints.has(addr)) {\n                // we already have a breakpoint there.\n                const breakpoint = this.breakpoints.get(addr);\n                if (typeof breakpoint !== \"number\") {\n                    // already enabled\n                    // tslint:disable-next-line:no-console\n                    console.warn(`Breakpoint at ${addr.toString(16)} already enabled.`);\n                    return;\n                }\n            }\n            let bkpt;\n            // choose where best to place a breakpoint\n            if (addr < 0x20000000) {\n                // we can use a HWBreakpoint\n                if (this.availableHWBreakpoints.length > 0) {\n                    if (!this.enabled) {\n                        yield this.setFpbEnabled(true);\n                    }\n                    const regAddr = this.availableHWBreakpoints.pop();\n                    bkpt = new breakpoint_1.HWBreakpoint(regAddr, this.core, addr);\n                }\n                else {\n                    bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\n                }\n            }\n            else {\n                bkpt = new breakpoint_1.SWBreakpoint(this.core, addr);\n            }\n            yield bkpt.set();\n            this.breakpoints.set(addr, bkpt);\n        });\n    }\n    deleteBreakpoint(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.breakpoints.has(addr)) {\n                const bkpt = this.breakpoints.get(addr);\n                if (typeof bkpt !== \"number\") {\n                    yield bkpt.clear();\n                    if (bkpt instanceof breakpoint_1.HWBreakpoint) {\n                        // return the register address to the pool\n                        this.availableHWBreakpoints.push(bkpt.regAddr);\n                    }\n                }\n                this.breakpoints.delete(addr);\n            }\n            else {\n                // tslint:disable-next-line:no-console\n                console.warn(`Breakpoint at ${addr.toString(16)} does not exist.`);\n            }\n        });\n    }\n    /**\n     * Step the processor forward by one instruction.\n     */\n    step() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const dhcsr = yield this.core.memory.read32(3758157296 /* DHCSR */);\n            if (!(dhcsr & (4 /* C_STEP */ | 2 /* C_HALT */))) {\n                // tslint:disable-next-line:no-console\n                console.error(\"Target is not halted.\");\n                return;\n            }\n            const interruptsMasked = (8 /* C_MASKINTS */ & dhcsr) !== 0;\n            if (!interruptsMasked) {\n                yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                    1 /* C_DEBUGEN */ |\n                    2 /* C_HALT */ |\n                    8 /* C_MASKINTS */);\n            }\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                1 /* C_DEBUGEN */ |\n                8 /* C_MASKINTS */ |\n                4 /* C_STEP */);\n            yield this.core.waitForHalt();\n            yield this.core.memory.write32(3758157296 /* DHCSR */, -1604386816 /* DBGKEY */ |\n                1 /* C_DEBUGEN */ |\n                2 /* C_HALT */);\n        });\n    }\n    /**\n     * Set up (and disable) the Flash Patch & Breakpoint unit. It will be enabled when\n     * the first breakpoint is set.\n     *\n     * Also reads the number of available hardware breakpoints.\n     */\n    setupFpb() {\n        return __awaiter(this, void 0, void 0, function* () {\n            // setup FPB (breakpoint)\n            const fpcr = yield this.core.memory.read32(3758104576 /* FP_CTRL */);\n            const nbCode = ((fpcr >> 8) & 0x70) | ((fpcr >> 4) & 0xf);\n            // const nbLit = (fpcr >> 7) & 0xf;\n            // this.totalHWBreakpoints = nbCode;\n            yield this.setFpbEnabled(false);\n            for (let i = 0; i < nbCode; i++) {\n                this.availableHWBreakpoints.push(3758104584 /* FP_COMP0 */ + (4 * i));\n                yield this.core.memory.write32(3758104584 /* FP_COMP0 */ + (i * 4), 0);\n            }\n        });\n    }\n    /**\n     * Enable or disable the Flash Patch and Breakpoint unit (FPB).\n     *\n     * @param enabled\n     */\n    setFpbEnabled(enabled = true) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.enabled = enabled;\n            yield this.core.memory.write32(3758104576 /* FP_CTRL */, 2 /* FP_CTRL_KEY */ | (enabled ? 1 : 0));\n        });\n    }\n}\nexports.Debug = Debug;\n\n\n\n},{\"./breakpoint\":6}],8:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nconst prepared_1 = require(\"./prepared\");\n/**\n * # Memory Interface\n *\n * Controls access to the target's memory.\n *\n * ## Usage\n *\n * Using an instance of `CortexM`, as described before, we can simply read and\n * write numbers to memory as follows:\n *\n * ```typescript\n * const mem = core.memory;\n *\n * // NOTE: the address parameter must be word (4-byte) aligned.\n * await mem.write32(0x200000, 12345);\n * const val = await mem.read32(0x200000);\n *\n * // val === 12345\n *\n * // NOTE: the address parameter must be half-word (2-byte) aligned\n * await mem.write16(0x2000002, 65534);\n * const val16 = await mem.read16(0x2000002);\n *\n * // val16 === 65534\n * ```\n *\n * To write a larger block of memory, we can use `readBlock` and `writeBlock`. Again,\n * these blocks must be written to word-aligned addresses in memory.\n *\n * ```typescript\n * const data = new Uint32Array([0x1234, 0x5678, 0x9ABC, 0xDEF0]);\n * await mem.writeBlock(0x200000, data);\n *\n * const readData = await mem.readBlock(0x200000, data.length, 0x100);\n * ```\n *\n * ## See also\n *\n * `PreparedMemoryCommand` provides an equivalent API with better performance (in some\n * cases) by enabling batched memory operations.\n */\nclass Memory {\n    constructor(dev) {\n        this.dev = dev;\n    }\n    /**\n     * Write a 32-bit word to the specified (word-aligned) memory address.\n     *\n     * @param addr Memory address to write to\n     * @param data Data to write (values above 2**32 will be truncated)\n     */\n    write32(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.writeAp(12 /* DRW */, data);\n            yield prep.go();\n        });\n    }\n    /**\n     * Write a 16-bit word to the specified (half word-aligned) memory address.\n     *\n     * @param addr Memory address to write to\n     * @param data Data to write (values above 2**16 will be truncated)\n     */\n    write16(addr, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            data = data << ((addr & 0x02) << 3);\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.writeAp(12 /* DRW */, data);\n            yield prep.go();\n        });\n    }\n    /**\n     * Read a 32-bit word from the specified (word-aligned) memory address.\n     *\n     * @param addr Memory address to read from.\n     */\n    read32(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.readAp(12 /* DRW */);\n            try {\n                return (yield prep.go())[0];\n            }\n            catch (e) {\n                // transfer wait, try again.\n                yield util_1.delay(100);\n                return yield this.read32(addr);\n            }\n        });\n    }\n    /**\n     * Read a 16-bit word from the specified (half word-aligned) memory address.\n     *\n     * @param addr Memory address to read from.\n     */\n    read16(addr) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n            prep.writeAp(4 /* TAR */, addr);\n            prep.readAp(12 /* DRW */);\n            let val;\n            try {\n                val = (yield prep.go())[0];\n            }\n            catch (e) {\n                // transfer wait, try again.\n                yield util_1.delay(100);\n                val = yield this.read16(addr);\n            }\n            val = (val >> ((addr & 0x02) << 3) & 0xffff);\n            return val;\n        });\n    }\n    /**\n     * Reads a block of memory from the specified memory address.\n     *\n     * @param addr Address to read from\n     * @param words Number of words to read\n     * @param pageSize Memory page size\n     */\n    readBlock(addr, words, pageSize) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const funs = [() => __awaiter(this, void 0, void 0, function* () { return Promise.resolve(); })];\n            const bufs = [];\n            const end = addr + words * 4;\n            let ptr = addr;\n            while (ptr < end) {\n                let nextptr = ptr + pageSize;\n                if (ptr === addr) {\n                    nextptr &= ~(pageSize - 1);\n                }\n                const len = Math.min(nextptr - ptr, end - ptr);\n                const ptr0 = ptr;\n                util_1.assert((len & 3) === 0);\n                funs.push(() => __awaiter(this, void 0, void 0, function* () {\n                    bufs.push(yield this.readBlockCore(ptr0, len >> 2));\n                }));\n                ptr = nextptr;\n            }\n            for (const f of funs) {\n                yield f();\n            }\n            const result = yield util_1.bufferConcat(bufs);\n            return result.subarray(0, words * 4);\n        });\n    }\n    /**\n     * Write a block of memory to the specified memory address.\n     *\n     * @param addr Memory address to write to.\n     * @param words Array of 32-bit words to write to memory.\n     */\n    writeBlock(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (words.length === 0) {\n                return;\n            }\n            return this.writeBlockCore(addr, words);\n        });\n    }\n    prepareCommand() {\n        return new prepared_1.PreparedMemoryCommand(this.dev);\n    }\n    readBlockCore(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const prep = this.dev.prepareCommand();\n            prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n            prep.writeAp(4 /* TAR */, addr);\n            yield prep.go();\n            let lastSize = words % 15;\n            if (lastSize === 0) {\n                lastSize = 15;\n            }\n            const blocks = [];\n            for (let i = 0; i < Math.ceil(words / 15); i++) {\n                const b = yield this.dev.readRegRepeat(util_1.apReg(12 /* DRW */, 2 /* READ */), i === blocks.length - 1 ? lastSize : 15);\n                blocks.push(b);\n            }\n            return util_1.bufferConcat(blocks);\n        });\n    }\n    writeBlockCore(addr, words) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const blSz = 14;\n                const reg = util_1.apReg(12 /* DRW */, 0 /* WRITE */);\n                const prep = this.dev.prepareCommand();\n                prep.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n                prep.writeAp(4 /* TAR */, addr);\n                for (let i = 0; i < Math.ceil(words.length / blSz); i++) {\n                    prep.writeRegRepeat(reg, words.subarray(i * blSz, i * blSz + blSz));\n                }\n                yield prep.go();\n            }\n            catch (e) {\n                if (e.dapWait) {\n                    yield util_1.delay(100);\n                    return yield this.writeBlockCore(addr, words);\n                }\n                else {\n                    throw e;\n                }\n            }\n        });\n    }\n}\nexports.Memory = Memory;\n\n\n\n},{\"../util\":17,\"./prepared\":9}],9:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n/**\n * # Prepared Memory Command\n *\n * Allows multiple memory operations to be batched together to improve HID\n * interface utilisation.\n *\n * ## Usage\n *\n * Similarly to `CortexMPreparedCommand` and `DapPreparedCommand`, a convenience\n * function exists to quickly create a prepared memory command:\n *\n * ```typescript\n * const prep = core.memory.prepareCommand();\n * ```\n *\n * You can then construct the sequence of commands using the same API as `Memory`.\n *\n * ```typescript\n * prep.write32(0x20000, 1234);\n * prep.write32(0x12344, 5678);\n * prep.write16(0x12346, 123);\n * ```\n *\n * And then dispatch the prepared commands asynchronously:\n *\n * ```typescript\n * await prep.go();\n * ```\n */\nclass PreparedMemoryCommand {\n    constructor(dap) {\n        this.cmd = dap.prepareCommand();\n    }\n    /**\n     * Schedule a 32-bit memory write operation.\n     *\n     * @param addr Word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    write32(addr, data) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.writeAp(12 /* DRW */, data);\n    }\n    /**\n     * Schedule a 16-bit memory write operation.\n     *\n     * @param addr Half word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    write16(addr, data) {\n        data = data << ((addr & 0x02) << 3);\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.writeAp(12 /* DRW */, data);\n    }\n    /**\n     * Schedule a 32-bit memory read operation.\n     *\n     * @param addr Word-aligned memory address to read from.\n     */\n    read32(addr) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 2 /* CSW_SIZE32 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.readAp(12 /* DRW */);\n    }\n    /**\n     * Schedule a 16-bit memory read operation.\n     *\n     * FIXME: the values need to be shifted after being read.\n     *\n     * @param addr Half word-aligned memory address to read from.\n     */\n    read16(addr) {\n        this.cmd.writeAp(0 /* CSW */, 587202640 /* CSW_VALUE */ | 1 /* CSW_SIZE16 */);\n        this.cmd.writeAp(4 /* TAR */, addr);\n        this.cmd.readAp(12 /* DRW */);\n    }\n    /**\n     * Execute all commands asynchronously.\n     */\n    go() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmd.go();\n        });\n    }\n}\nexports.PreparedMemoryCommand = PreparedMemoryCommand;\n\n\n\n},{}],10:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nclass FlashSection {\n    constructor(address, data) {\n        this.address = address;\n        this.data = data;\n        /* empty */\n    }\n    toString() {\n        return `${this.data.byteLength} bytes @ ${this.address.toString(16)}`;\n    }\n}\nexports.FlashSection = FlashSection;\n/**\n * # Flash Program\n *\n * Represents a program to be flashed to memory as a series of disjoint sections\n * in memory/flash.\n *\n * ## Usage\n *\n * Use with a hex file is as simple as loading it from disk, and calling `fromIntelHex`.\n *\n * ```typescript\n * const hexFile = \"microbit.hex\";\n * const hexData = fs.readFileSync(hexFile, { encoding: 'utf-8' });\n *\n * const program = FlashProgram.fromIntelHex(hexData);\n * core.program(program, (progress) => {\n *     console.log(`Flash progress: ${progress * 100}%`);\n * });\n * ```\n *\n * When used with a binary file, you must make sure that the file is stored in a\n * Uint32Array, and you must provide a base address for the binary to be written to.\n * The base address is commonly zero.\n */\nclass FlashProgram {\n    constructor(sections) {\n        this.sections = sections;\n    }\n    static fromIntelHex(hex) {\n        const lines = hex.split(/\\n/);\n        let upperAddr = 0;\n        let startAddr = 0;\n        let current = null;\n        const chunks = [];\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n            if (line.substr(0, 1) !== \":\") {\n                throw new Error(`Invaild line in hex file: ${i + 1}`);\n            }\n            else {\n                const length = parseInt(line.substr(1, 2), 16);\n                const addr = upperAddr + parseInt(line.substr(3, 4), 16);\n                const fieldType = parseInt(line.substr(7, 2), 16);\n                const data = line.substr(9, length * 2);\n                if (fieldType === 0x00) {\n                    if (current && addr !== startAddr + (current.length / 2)) {\n                        // non-contiguous\n                        const sectionData = util_1.hex2bin(current);\n                        chunks.push(new FlashSection(startAddr, new Uint32Array(sectionData.buffer)));\n                        current = \"\";\n                        startAddr = addr;\n                    }\n                    else if (!current) {\n                        startAddr = addr;\n                        current = \"\";\n                    }\n                    current += data;\n                }\n                else if (fieldType === 0x01) {\n                    // EOF\n                    break;\n                }\n                else if (fieldType === 0x02) {\n                    // extended segment address record\n                    upperAddr = parseInt(data, 16) << 4;\n                }\n                else if (fieldType === 0x04) {\n                    // extended linear address record\n                    upperAddr = parseInt(data, 16) << 16;\n                }\n            }\n        }\n        return new FlashProgram(chunks);\n    }\n    static fromBinary(addr, bin) {\n        return new FlashProgram([new FlashSection(addr, bin)]);\n    }\n    totalByteLength() {\n        return this.sections.map(s => s.data.byteLength).reduce((x, y) => x + y);\n    }\n    toString() {\n        return this.sections.toString();\n    }\n}\nexports.FlashProgram = FlashProgram;\n\n\n\n},{\"../util\":17}],11:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst cortex_1 = require(\"../cortex/cortex\");\nconst K64F_1 = require(\"./K64F\");\nconst NRF51_1 = require(\"./NRF51\");\n/**\n * Analyzer code blob, from PyOCD. This can be used to compute a table of CRC\n * values. See https://github.com/mbedmicro/pyOCD/tree/master/src/analyzer.\n */\nconst analyzer = new Uint32Array([\n    0x2180468c, 0x2600b5f0, 0x4f2c2501, 0x447f4c2c, 0x1c2b0049, 0x425b4033, 0x40230872, 0x085a4053,\n    0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a,\n    0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b,\n    0x40534023, 0xc7083601, 0xd1d2428e, 0x2b004663, 0x4663d01f, 0x46b4009e, 0x24ff2701, 0x44844d11,\n    0x1c3a447d, 0x88418803, 0x4351409a, 0xd0122a00, 0x22011856, 0x780b4252, 0x40533101, 0x009b4023,\n    0x0a12595b, 0x42b1405a, 0x43d2d1f5, 0x4560c004, 0x2000d1e7, 0x2200bdf0, 0x46c0e7f8, 0x000000b6,\n    0xedb88320, 0x00000044,\n]);\n/**\n * # Flash Target\n *\n * Represents a target device containing a flash region. In rare cases that a\n * target chip only has RAM, uploading a program is as simple as writing a\n * block of data to memory.\n *\n * ## Usage\n *\n * Initialising the `FlashTarget` object is the same as configuring a Cortex-M\n * object, but with an additional parameter for the platform (contains the\n * flashing algorithm and memory layout).\n *\n * ```typescript\n * import {K64F, DAP, FlashTarget} from \"dapjs\";\n *\n * // make sure hid is an object implementing the `IHID` interface.\n * const dap = new DAP(hid);\n * const device = new FlashTarget(dap, K64F);\n * ```\n *\n * Now, we can do all of the operations you'd expect. As usual, these examples\n * work in a function marked `async`. Alternatively, they can be implemented\n * using Promises directly.\n *\n * ```typescript\n * await device.eraseChip();\n *\n * // flash a hex program\n *\n * ```\n */\nclass FlashTarget extends cortex_1.CortexM {\n    constructor(device, platform) {\n        super(device);\n        this.platform = platform;\n        this.inited = false;\n    }\n    /**\n     * Initialise the flash driver on the chip. Must be called before any of the other\n     * flash-related methods.\n     */\n    flashInit() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.inited) {\n                return;\n            }\n            // reset and halt\n            yield this.reset(true);\n            // make sure we're in Thumb mode.\n            yield this.writeCoreRegister(16 /* XPSR */, 1 << 24);\n            yield this.writeCoreRegister(9 /* R9 */, this.platform.flashAlgo.staticBase);\n            // upload analyzer\n            if (this.platform.flashAlgo.analyzerSupported) {\n                yield this.memory.writeBlock(this.platform.flashAlgo.analyzerAddress, analyzer);\n            }\n            const result = yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcInit, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, true, 0, 0, 0, 0);\n            this.inited = true;\n            return result;\n        });\n    }\n    /**\n     * Erase _all_ data stored in flash on the chip.\n     */\n    eraseChip() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.inited) {\n                yield this.flashInit();\n            }\n            const result = yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcEraseAll, this.platform.flashAlgo.loadAddress + 1, this.platform.flashAlgo.stackPointer, false, 0, 0, 0);\n            return result;\n        });\n    }\n    /**\n     * Flash a contiguous block of data to flash at a specified address.\n     *\n     * @param data Array of 32-bit integers to write to flash.\n     * @param address Memory address in flash to write to.\n     * @param progressCb Callback to keep track of progress through upload (from 0.0 to 1.0)\n     */\n    flash(data, address, progressCb) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!this.inited) {\n                yield this.flashInit();\n            }\n            const pageSizeWords = this.platform.flashAlgo.pageSize / 4;\n            const bufferAddress = this.platform.flashAlgo.pageBuffers[0];\n            const flashStart = address || this.platform.flashAlgo.flashStart;\n            // How far through `data` are we (in bytes)\n            let ptr = 0;\n            while (ptr < data.byteLength) {\n                const wordPtr = ptr / 4;\n                const pageData = data.subarray(wordPtr, wordPtr + pageSizeWords);\n                const flashAddress = flashStart + ptr;\n                yield this.memory.writeBlock(bufferAddress, pageData);\n                yield this.runCode(this.platform.flashAlgo.instructions, this.platform.flashAlgo.loadAddress, this.platform.flashAlgo.pcProgramPage, // pc\n                this.platform.flashAlgo.loadAddress + 1, // lr\n                this.platform.flashAlgo.stackPointer, // sp\n                /* upload? */\n                false, \n                /* args */\n                flashAddress, this.platform.flashAlgo.pageSize, bufferAddress);\n                if (progressCb) {\n                    progressCb(ptr / data.byteLength);\n                }\n                ptr += pageData.byteLength;\n            }\n            if (progressCb) {\n                progressCb(1.0);\n            }\n        });\n    }\n    /**\n     * Upload a program consisting of one or more disjoint sections to flash.\n     *\n     * @param program Program to be uploaded\n     * @param progressCb Callback to receive progress updates (from 0.0 to 1.0)\n     */\n    program(program, progressCb) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.flashInit();\n            yield this.eraseChip();\n            const totalBytes = program.totalByteLength();\n            let cumulativeBytes = 0;\n            // const startTime = Date.now();\n            for (const section of program.sections) {\n                yield this.flash(section.data, section.address, progress => {\n                    const sectionBytes = section.data.byteLength * progress;\n                    progressCb((cumulativeBytes + sectionBytes) / totalBytes);\n                });\n                cumulativeBytes += section.data.byteLength;\n            }\n            // const endTime = Date.now();\n            // const elapsedTime = endTime - startTime;\n            // const transferRate = totalBytes / elapsedTime; // B/ms == kB/s\n            yield this.flashUnInit();\n            progressCb(1.0);\n        });\n    }\n    /**\n     * Un-init the flash algorithm. Commonly, we use this to ensure that the flashing\n     * algorithms are re-uploaded after resets.\n     */\n    flashUnInit() {\n        this.inited = false;\n    }\n}\nexports.FlashTarget = FlashTarget;\n/**\n * Map of mbed device codes to platform objects. Can be used by applications\n * to dynamically select flashing algorithm based on the devices connected to\n * the computer.\n *\n * > *TODO:* extend the mbed devices API to include data stored here, so that we can\n * > expand to cover all devices without needing to update DAP.js.\n */\nexports.FlashTargets = new Map();\nexports.FlashTargets.set(\"0240\", new K64F_1.K64F());\nexports.FlashTargets.set(\"9900\", new NRF51_1.NRF51());\n\n\n\n},{\"../cortex/cortex\":2,\"./K64F\":12,\"./NRF51\":13}],12:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst K64F_FLASH_ALGO = {\n    analyzerAddress: 0x1ffff000,\n    analyzerSupported: true,\n    flashSize: 0x100000,\n    flashStart: 0x0,\n    // Flash algorithm as a hex string\n    instructions: new Uint32Array([\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\n        0x4604b570, 0x4616460d, 0x5020f24c, 0x81c84932, 0x1028f64d, 0x460881c8, 0xf0208800, 0x80080001,\n        0x4448482e, 0xf8dcf000, 0x2001b108, 0x2000bd70, 0x4601e7fc, 0x47702000, 0x4929b510, 0x44484827,\n        0xf8b8f000, 0xb92c4604, 0x48242100, 0xf0004448, 0x4604f9a9, 0xf837f000, 0xbd104620, 0x4604b570,\n        0x4448481e, 0x46214b1e, 0xf00068c2, 0x4605f85d, 0x481ab93d, 0x23004448, 0x68c24621, 0xf946f000,\n        0xf0004605, 0x4628f820, 0xb5febd70, 0x460c4605, 0x46234616, 0x46294632, 0x44484810, 0xf8f8f000,\n        0xb9674607, 0x22012000, 0x2000e9cd, 0x46224633, 0x90024629, 0x44484809, 0xf984f000, 0xf0004607,\n        0x4638f802, 0x4807bdfe, 0xf4206840, 0xf5000070, 0x49040070, 0x47706048, 0x40052000, 0x00000004,\n        0x6b65666b, 0x4001f000, 0x4a0e2070, 0x20807010, 0xbf007010, 0x7800480b, 0x280009c0, 0x4809d0fa,\n        0xf0017801, 0xb1080020, 0x47702067, 0x0010f001, 0x2068b108, 0xf001e7f9, 0xb1080001, 0xe7f42069,\n        0xe7f22000, 0x40020000, 0x4df0e92d, 0x460d4604, 0x469a4690, 0xf0004650, 0x4606f891, 0x4630b116,\n        0x8df0e8bd, 0x46422310, 0x46204629, 0xf86cf000, 0xb10e4606, 0xe7f34630, 0x0008eb05, 0x68e01e47,\n        0xf1f0fbb7, 0x7011fb00, 0x68e0b140, 0xf0f0fbb7, 0x0b01f100, 0xfb0068e0, 0x1e47f00b, 0x480be011,\n        0x68004478, 0x20096005, 0x71c84909, 0xffacf7ff, 0x69a04606, 0x69a0b108, 0xb1064780, 0x68e0e003,\n        0x42bd4405, 0xbf00d9eb, 0xe7c94630, 0x000002ec, 0x40020000, 0x4604b570, 0x4628460d, 0xf84ef000,\n        0xb10e4606, 0xbd704630, 0x2004b90c, 0x2044e7fb, 0x71c84902, 0xff88f7ff, 0x0000e7f5, 0x40020000,\n        0xb9094601, 0x47702004, 0x6cc04826, 0x6003f3c0, 0x447b4b25, 0x0010f833, 0xb90a0302, 0xe7f22064,\n        0x60082000, 0x2002604a, 0x02c06088, 0x200060c8, 0x61486108, 0xbf006188, 0x4602e7e5, 0x2004b90a,\n        0x61914770, 0xe7fb2000, 0x4604b530, 0x2004b90c, 0x1e58bd30, 0xb9104008, 0x40101e58, 0x2065b108,\n        0x6820e7f6, 0xd8054288, 0x0500e9d4, 0x188d4428, 0xd20142a8, 0xe7eb2066, 0xe7e92000, 0x480b4601,\n        0xd0014281, 0x4770206b, 0xe7fc2000, 0xb90b4603, 0x47702004, 0xd801290f, 0xd0012a04, 0xe7f82004,\n        0xe7f62000, 0x40048000, 0x0000025a, 0x6b65666b, 0x41f0e92d, 0x46884607, 0x461d4614, 0x2004b914,\n        0x81f0e8bd, 0x462a2308, 0x46384641, 0xffbcf7ff, 0xb10e4606, 0xe7f34630, 0x4812e01f, 0x68004478,\n        0x8000f8c0, 0x490fcc01, 0x390c4479, 0x60486809, 0x490ccc01, 0x39184479, 0x60886809, 0x490a2007,\n        0xf7ff71c8, 0x4606ff01, 0xb10869b8, 0x478069b8, 0xe004b106, 0x0808f108, 0x2d003d08, 0xbf00d1dd,\n        0xe7cd4630, 0x000001b0, 0x40020000, 0x4dffe92d, 0x4682b082, 0x2310460c, 0x46504621, 0xf7ff9a04,\n        0x4683ff83, 0x0f00f1bb, 0x4658d003, 0xe8bdb006, 0xe9da8df0, 0xfbb00101, 0x4260f7f1, 0x40084279,\n        0x42a54245, 0x443dd100, 0xe0229e04, 0x0804eba5, 0xd90045b0, 0xea4f46b0, 0x90011018, 0x4478480f,\n        0x60046800, 0x490e2001, 0x980171c8, 0x72c80a00, 0x72889801, 0x72489805, 0xfeb6f7ff, 0xf1bb4683,\n        0xd0010f00, 0xe7d14658, 0x0608eba6, 0x443d4444, 0x2e00bf00, 0x2000d1da, 0x0000e7c8, 0x0000010e,\n        0x40020000, 0x4604b570, 0xb90c460d, 0xbd702004, 0x49032040, 0x460871c8, 0xf7ff7185, 0xe7f6fe95,\n        0x40020000, 0x4dffe92d, 0x4617460c, 0xe9dd461d, 0xf8ddb80c, 0xb91da038, 0xb0042004, 0x8df0e8bd,\n        0x463a2304, 0x98004621, 0xff1ef7ff, 0xb10e4606, 0xe7f24630, 0x4814e022, 0x68004478, 0x20026004,\n        0x71c84912, 0xf8804608, 0x490fb00b, 0x39144479, 0x68096828, 0xf7ff6088, 0x4606fe67, 0xf1b8b15e,\n        0xd0010f00, 0x4000f8c8, 0x0f00f1ba, 0x2000d002, 0x0000f8ca, 0x1f3fe004, 0x1d241d2d, 0xd1da2f00,\n        0x4630bf00, 0x0000e7c9, 0x00000074, 0x40020000, 0x00000000, 0x00080000, 0x00100000, 0x00200000,\n        0x00400000, 0x00800000, 0x01000000, 0x01000000, 0x40020004, 0x00000000,\n    ]),\n    loadAddress: 0x20000000,\n    pageBuffers: [0x20003000, 0x20004000],\n    pageSize: 0x1000,\n    // Relative function addresses\n    pcEraseAll: 0x20000059,\n    pcEraseSector: 0x2000007D,\n    pcInit: 0x20000021,\n    // pcUnInit: 0x49,\n    pcProgramPage: 0x200000AB,\n    stackPointer: 0x20001000,\n    staticBase: 0x20000000 + 0x20 + 0x474,\n};\nclass K64F {\n    constructor() {\n        this.flashAlgo = K64F_FLASH_ALGO;\n    }\n    overrideSecurityBits(address, data) {\n        const u8data = new Uint8Array(data.buffer);\n        // Kinetis security values and addresses\n        const SECURITY_START = 0x400;\n        const SECURITY_SIZE = 16;\n        const FPROT_ADDR = 0x408;\n        const FPROT_ADDR_END = 0x40c;\n        // const FPROT_SIZE = 4;\n        const FSEC_ADDR = 0x40c;\n        const FSEC_VAL = 0xFE;\n        // const FOPT_ADDR = 0x40d;\n        // const FOPT_VAL = 0xFF;\n        const FEPROT_ADDR = 0x40e;\n        const FEPROT_VAL = 0xFF;\n        const FDPROT_ADDR = 0x40f;\n        const FDPROT_VAL = 0xFF;\n        if (address <= SECURITY_START && address + u8data.byteLength > SECURITY_START + SECURITY_SIZE) {\n            for (let i = FPROT_ADDR; i < FPROT_ADDR_END; i++) {\n                if (u8data[i - address] !== 0xff) {\n                    u8data[i - address] = 0xff;\n                }\n            }\n            if (u8data[FSEC_ADDR - address] !== FSEC_VAL) {\n                u8data[FSEC_ADDR - address] = FSEC_VAL;\n            }\n            // if (u8data[FOPT_ADDR - address] === 0x00) {\n            // }\n            if (u8data[FEPROT_ADDR - address] !== FEPROT_VAL) {\n                u8data[FEPROT_ADDR - address] = FEPROT_VAL;\n            }\n            if (u8data[FDPROT_ADDR - address] !== FDPROT_VAL) {\n                u8data[FDPROT_ADDR - address] = FDPROT_VAL;\n            }\n        }\n    }\n}\nexports.K64F = K64F;\n\n\n\n},{}],13:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst NRF51_FLASH_ALGO = {\n    analyzerAddress: 0x20003000,\n    analyzerSupported: true,\n    beginData: 0x20002000,\n    flashSize: 0x40000,\n    flashStart: 0x0,\n    instructions: new Uint32Array([\n        0xE00ABE00, 0x062D780D, 0x24084068, 0xD3000040, 0x1E644058, 0x1C49D1FA, 0x2A001E52, 0x4770D1F2,\n        0x47702000, 0x47702000, 0x4c26b570, 0x60602002, 0x60e02001, 0x68284d24, 0xd00207c0, 0x60602000,\n        0xf000bd70, 0xe7f6f82c, 0x4c1eb570, 0x60612102, 0x4288491e, 0x2001d302, 0xe0006160, 0x4d1a60a0,\n        0xf81df000, 0x07c06828, 0x2000d0fa, 0xbd706060, 0x4605b5f8, 0x4813088e, 0x46142101, 0x4f126041,\n        0xc501cc01, 0x07c06838, 0x1e76d006, 0x480dd1f8, 0x60412100, 0xbdf84608, 0xf801f000, 0x480ce7f2,\n        0x06006840, 0xd00b0e00, 0x6849490a, 0xd0072900, 0x4a0a4909, 0xd00007c3, 0x1d09600a, 0xd1f90840,\n        0x00004770, 0x4001e500, 0x4001e400, 0x10001000, 0x40010400, 0x40010500, 0x40010600, 0x6e524635,\n        0x00000000,\n    ]),\n    loadAddress: 0x20000000,\n    minProgramLength: 4,\n    pageBuffers: [0x20002000, 0x20002400],\n    pageSize: 0x400,\n    pcEraseAll: 0x20000029,\n    pcEraseSector: 0x20000049,\n    pcInit: 0x20000021,\n    pcProgramPage: 0x20000071,\n    stackPointer: 0x20001000,\n    staticBase: 0x20000170,\n};\nclass NRF51 {\n    constructor() {\n        this.flashAlgo = NRF51_FLASH_ALGO;\n    }\n    overrideSecurityBits(_address, _data) {\n        /* empty */\n    }\n}\nexports.NRF51 = NRF51;\n\n\n\n},{}],14:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass PlatformSelector {\n    constructor() {\n        this.deviceCache = new Map();\n    }\n    lookupDevice(code) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.deviceCache.has(code)) {\n                return this.deviceCache.get(code);\n            }\n            const xhr = new XMLHttpRequest();\n            xhr.open(\"get\", `https://os.mbed.com/api/v3/platforms/${code}/`, true);\n            xhr.responseType = \"json\";\n            return new Promise((resolve, _reject) => {\n                xhr.onload = (_e) => {\n                    const device = {\n                        name: xhr.response.name,\n                        productCode: xhr.response.productcode,\n                    };\n                    this.deviceCache.set(code, device);\n                    resolve(device);\n                };\n                xhr.send();\n            });\n        });\n    }\n}\nexports.PlatformSelector = PlatformSelector;\n\n\n\n},{}],15:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nclass CMSISDAP {\n    // private maxSent = 1;\n    constructor(hid) {\n        this.hid = hid;\n    }\n    resetTarget() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(10 /* DAP_RESET_TARGET */, []);\n        });\n    }\n    disconnect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(3 /* DAP_DISCONNECT */, []);\n        });\n    }\n    cmdNums(op, data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            data.unshift(op);\n            const buf = yield this.send(data);\n            if (buf[0] !== op) {\n                throw new Error(`Bad response for ${op} -> ${buf[0]}`);\n            }\n            switch (op) {\n                case 2 /* DAP_CONNECT */:\n                case 0 /* DAP_INFO */:\n                case 5 /* DAP_TRANSFER */:\n                case 6 /* DAP_TRANSFER_BLOCK */:\n                    break;\n                default:\n                    if (buf[1] !== 0) {\n                        throw new Error(`Bad status for ${op} -> ${buf[1]}`);\n                    }\n            }\n            return buf;\n        });\n    }\n    connect() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const v = yield this.info(254 /* PACKET_COUNT */);\n            if (v) {\n                // this.maxSent = v as number;\n            }\n            else {\n                throw new Error(\"DAP_INFO returned invalid packet count.\");\n            }\n            yield this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\n            const buf = yield this.cmdNums(2 /* DAP_CONNECT */, [0]);\n            if (buf[1] !== 1) {\n                throw new Error(\"SWD mode not enabled.\");\n            }\n            yield this.cmdNums(17 /* DAP_SWJ_CLOCK */, util_1.addInt32(null, 10000000));\n            yield this.cmdNums(4 /* DAP_TRANSFER_CONFIGURE */, [0, 0x50, 0, 0, 0]);\n            yield this.cmdNums(19 /* DAP_SWD_CONFIGURE */, [0]);\n            yield this.jtagToSwd();\n        });\n    }\n    jtagToSwd() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const arrs = [\n                [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n                [16, 0x9e, 0xe7],\n                [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n                [8, 0x00],\n            ];\n            for (const arr of arrs) {\n                yield this.swjSequence(arr);\n            }\n        });\n    }\n    swjSequence(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.cmdNums(18 /* DAP_SWJ_SEQUENCE */, data);\n        });\n    }\n    info(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.cmdNums(0 /* DAP_INFO */, [id]);\n            if (buf[1] === 0) {\n                return null;\n            }\n            switch (id) {\n                case 240 /* CAPABILITIES */:\n                case 254 /* PACKET_COUNT */:\n                case 255 /* PACKET_SIZE */:\n                    if (buf[1] === 1) {\n                        return buf[2];\n                    }\n                    else if (buf[1] === 2) {\n                        return buf[3] << 8 | buf[2];\n                    }\n            }\n            return buf.subarray(2, buf[1] + 2 - 1); // .toString(\"utf8\")\n        });\n    }\n    send(command) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const array = Uint8Array.from(command);\n            yield this.hid.write(array.buffer);\n            const response = yield this.hid.read();\n            return new Uint8Array(response.buffer);\n        });\n    }\n}\nexports.CMSISDAP = CMSISDAP;\n\n\n\n},{\"../util\":17}],16:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction bufferExtend(source, length) {\n    const sarr = new Uint8Array(source);\n    const dest = new ArrayBuffer(length);\n    const darr = new Uint8Array(dest);\n    for (let i = 0; i < Math.min(source.byteLength, length); i++) {\n        darr[i] = sarr[i];\n    }\n    return dest;\n}\nclass HID {\n    constructor(device) {\n        this.device = device;\n    }\n    open() {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.device.open();\n            yield this.device.selectConfiguration(1);\n            const hids = this.device.configuration.interfaces.filter(intf => intf.alternates[0].interfaceClass === 0xFF);\n            if (hids.length === 0) {\n                throw new Error(\"No HID interfaces found.\");\n            }\n            this.interfaces = hids;\n            if (this.interfaces.length === 1) {\n                this.interface = this.interfaces[0];\n            }\n            yield this.device.claimInterface(this.interface.interfaceNumber);\n            this.endpoints = this.interface.alternates[0].endpoints;\n            this.epIn = null;\n            this.epOut = null;\n            for (const endpoint of this.endpoints) {\n                if (endpoint.direction === \"in\") {\n                    this.epIn = endpoint;\n                }\n                else {\n                    this.epOut = endpoint;\n                }\n            }\n            if (this.epIn === null || this.epOut === null) {\n                // tslint:disable-next-line:no-console\n                console.log(\"Unable to find an in and an out endpoint.\");\n            }\n        });\n    }\n    close() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.device.close();\n        });\n    }\n    write(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const reportSize = this.epOut.packetSize;\n            const buffer = bufferExtend(data, reportSize);\n            return this.device.transferOut(this.epOut.endpointNumber, buffer);\n        });\n    }\n    read() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const reportSize = this.epIn.packetSize;\n            return this.device.transferIn(this.epIn.endpointNumber, reportSize)\n                .then(res => res.data);\n        });\n    }\n}\nexports.HID = HID;\n\n\n\n},{}],17:[function(require,module,exports){\n\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.readUInt32LE = (b, idx) => {\n    return (b[idx] |\n        (b[idx + 1] << 8) |\n        (b[idx + 2] << 16) |\n        (b[idx + 3] << 24)) >>> 0;\n};\nexports.bufferConcat = (bufs) => {\n    let len = 0;\n    for (const b of bufs) {\n        len += b.length;\n    }\n    const r = new Uint8Array(len);\n    len = 0;\n    for (const b of bufs) {\n        r.set(b, len);\n        len += b.length;\n    }\n    return r;\n};\nexports.delay = (t) => __awaiter(this, void 0, void 0, function* () {\n    return new Promise(resolve => {\n        setTimeout(resolve, t);\n    });\n});\nexports.addInt32 = (arr, val) => {\n    if (!arr) {\n        arr = [];\n    }\n    arr.push(val & 0xff, (val >> 8) & 0xff, (val >> 16) & 0xff, (val >> 24) & 0xff);\n    return arr;\n};\nexports.hex = (v) => {\n    return \"0x\" + v.toString(16);\n};\nexports.rid = (v) => {\n    const m = [\n        \"DP_0x0\",\n        \"DP_0x4\",\n        \"DP_0x8\",\n        \"DP_0xC\",\n        \"AP_0x0\",\n        \"AP_0x4\",\n        \"AP_0x8\",\n        \"AP_0xC\",\n    ];\n    return m[v] || \"?\";\n};\nexports.bank = (addr) => {\n    const APBANKSEL = 0x000000f0;\n    return (addr & APBANKSEL) | (addr & 0xff000000);\n};\nexports.apReg = (r, mode) => {\n    const v = r | mode | 1 /* AP_ACC */;\n    return (4 + ((v & 0x0c) >> 2));\n};\nexports.bufToUint32Array = (buf) => {\n    exports.assert((buf.length & 3) === 0);\n    const r = [];\n    if (!buf.length) {\n        return r;\n    }\n    r[buf.length / 4 - 1] = 0;\n    for (let i = 0; i < r.length; ++i) {\n        r[i] = exports.readUInt32LE(buf, i << 2);\n    }\n    return r;\n};\nexports.assert = (cond) => {\n    if (!cond) {\n        throw new Error(\"assertion failed\");\n    }\n};\nexports.regRequest = (regId, isWrite = false) => {\n    let request = !isWrite ? 2 /* READ */ : 0 /* WRITE */;\n    if (regId < 4) {\n        request |= 0 /* DP_ACC */;\n    }\n    else {\n        request |= 1 /* AP_ACC */;\n    }\n    request |= (regId & 3) << 2;\n    return request;\n};\nexports.hexBytes = (bytes) => {\n    let chk = 0;\n    let r = \":\";\n    bytes.forEach(b => chk += b);\n    bytes.push((-chk) & 0xff);\n    bytes.forEach(b => r += (\"0\" + b.toString(16)).slice(-2));\n    return r.toUpperCase();\n};\nexports.hex2bin = (hexstr) => {\n    const array = new Uint8Array(hexstr.length / 2);\n    for (let i = 0; i < hexstr.length / 2; i++) {\n        array[i] = parseInt(hexstr.substr(2 * i, 2), 16);\n    }\n    return array;\n};\n\n\n\n},{}],18:[function(require,module,exports){\n\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar cortex_1 = require(\"./cortex/cortex\");\nexports.CortexM = cortex_1.CortexM;\nvar constants_1 = require(\"./cortex/constants\");\nexports.CoreNames = constants_1.CoreNames;\nexports.ISANames = constants_1.ISANames;\nvar dap_1 = require(\"./dap/dap\");\nexports.DAP = dap_1.DAP;\nvar FlashTarget_1 = require(\"./targets/FlashTarget\");\nexports.FlashTargets = FlashTarget_1.FlashTargets;\nexports.FlashTarget = FlashTarget_1.FlashTarget;\nvar FlashProgram_1 = require(\"./targets/FlashProgram\");\nexports.FlashProgram = FlashProgram_1.FlashProgram;\nvar PlatformSelector_1 = require(\"./targets/PlatformSelector\");\nexports.PlatformSelector = PlatformSelector_1.PlatformSelector;\nvar hid_1 = require(\"./transport/hid\");\nexports.HID = hid_1.HID;\n\n\n\n},{\"./cortex/constants\":1,\"./cortex/cortex\":2,\"./dap/dap\":4,\"./targets/FlashProgram\":10,\"./targets/FlashTarget\":11,\"./targets/PlatformSelector\":14,\"./transport/hid\":16}]},{},[18])(18)\n});"],"file":"dap.bundle.js","sourceRoot":"../lib"}