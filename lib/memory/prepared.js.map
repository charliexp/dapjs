{"version":3,"sources":["memory/prepared.ts"],"names":[],"mappings":";;;;;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA4BG;AACH;IAGI,YAAY,GAAQ;QAChB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC,cAAc,EAAE,CAAC;IACpC,CAAC;IAED;;;;;OAKG;IACI,OAAO,CAAC,IAAY,EAAE,IAAY;QACrC,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,8CAA8B,CAAC,CAAC;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,OAAO,eAAY,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;;;;OAKG;IACI,OAAO,CAAC,IAAY,EAAE,IAAY;QACrC,IAAI,GAAG,IAAI,IAAI,CAAC,CAAC,IAAI,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAEpC,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,8CAA8B,CAAC,CAAC;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,OAAO,eAAY,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;;;OAIG;IACI,MAAM,CAAC,IAAY;QACtB,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,8CAA8B,CAAC,CAAC;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,MAAM,cAAW,CAAC;IAC/B,CAAC;IAED;;;;;;OAMG;IACI,MAAM,CAAC,IAAY;QACtB,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,8CAA8B,CAAC,CAAC;QAC5D,IAAI,CAAC,GAAG,CAAC,OAAO,cAAY,IAAI,CAAC,CAAC;QAClC,IAAI,CAAC,GAAG,CAAC,MAAM,cAAW,CAAC;IAC/B,CAAC;IAED;;OAEG;IACU,EAAE;;YACX,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;QACzB,CAAC;KAAA;CACJ;AA/DD,sDA+DC","file":"prepared.js","sourcesContent":["import {DAP} from \"../dap/dap\";\n\nimport {ApReg, Csw} from \"../dap/constants\";\nimport {PreparedDapCommand} from \"../dap/prepared\";\n\n/**\n * # Prepared Memory Command\n *\n * Allows multiple memory operations to be batched together to improve HID\n * interface utilisation.\n *\n * ## Usage\n *\n * Similarly to `CortexMPreparedCommand` and `DapPreparedCommand`, a convenience\n * function exists to quickly create a prepared memory command:\n *\n * ```typescript\n * const prep = core.memory.prepareCommand();\n * ```\n *\n * You can then construct the sequence of commands using the same API as `Memory`.\n *\n * ```typescript\n * prep.write32(0x20000, 1234);\n * prep.write32(0x12344, 5678);\n * prep.write16(0x12346, 123);\n * ```\n *\n * And then dispatch the prepared commands asynchronously:\n *\n * ```typescript\n * await prep.go();\n * ```\n */\nexport class PreparedMemoryCommand {\n    private cmd: PreparedDapCommand;\n\n    constructor(dap: DAP) {\n        this.cmd = dap.prepareCommand();\n    }\n\n    /**\n     * Schedule a 32-bit memory write operation.\n     *\n     * @param addr Word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    public write32(addr: number, data: number) {\n        this.cmd.writeAp(ApReg.CSW, Csw.CSW_VALUE | Csw.CSW_SIZE32);\n        this.cmd.writeAp(ApReg.TAR, addr);\n        this.cmd.writeAp(ApReg.DRW, data);\n    }\n\n    /**\n     * Schedule a 16-bit memory write operation.\n     *\n     * @param addr Half word-aligned memory address to write to.\n     * @param data Number to be written.\n     */\n    public write16(addr: number, data: number) {\n        data = data << ((addr & 0x02) << 3);\n\n        this.cmd.writeAp(ApReg.CSW, Csw.CSW_VALUE | Csw.CSW_SIZE16);\n        this.cmd.writeAp(ApReg.TAR, addr);\n        this.cmd.writeAp(ApReg.DRW, data);\n    }\n\n    /**\n     * Schedule a 32-bit memory read operation.\n     *\n     * @param addr Word-aligned memory address to read from.\n     */\n    public read32(addr: number) {\n        this.cmd.writeAp(ApReg.CSW, Csw.CSW_VALUE | Csw.CSW_SIZE32);\n        this.cmd.writeAp(ApReg.TAR, addr);\n        this.cmd.readAp(ApReg.DRW);\n    }\n\n    /**\n     * Schedule a 16-bit memory read operation.\n     *\n     * FIXME: the values need to be shifted after being read.\n     *\n     * @param addr Half word-aligned memory address to read from.\n     */\n    public read16(addr: number) {\n        this.cmd.writeAp(ApReg.CSW, Csw.CSW_VALUE | Csw.CSW_SIZE16);\n        this.cmd.writeAp(ApReg.TAR, addr);\n        this.cmd.readAp(ApReg.DRW);\n    }\n\n    /**\n     * Execute all commands asynchronously.\n     */\n    public async go() {\n        return this.cmd.go();\n    }\n}\n"],"sourceRoot":"../../src"}