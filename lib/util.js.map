{"version":3,"sources":["util.ts"],"names":[],"mappings":"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","file":"util.js","sourcesContent":["import {ApReg, DapVal, Reg} from \"./dap/constants\";\n\nexport const readUInt32LE = (b: Uint8Array, idx: number) => {\n    return (b[idx] |\n        (b[idx + 1] << 8) |\n        (b[idx + 2] << 16) |\n        (b[idx + 3] << 24)) >>> 0;\n};\n\nexport const bufferConcat = (bufs: Uint8Array[]) => {\n    let len = 0;\n    for (const b of bufs) {\n        len += b.length;\n    }\n    const r = new Uint8Array(len);\n    len = 0;\n    for (const b of bufs) {\n        r.set(b, len);\n        len += b.length;\n    }\n    return r;\n};\n\nexport const delay = async (t: number) => {\n    return new Promise(resolve => {\n        setTimeout(resolve, t);\n    });\n};\n\nexport const addInt32 = (arr: number[], val: number) => {\n    if (!arr) {\n        arr = [];\n    }\n\n    arr.push(val & 0xff, (val >> 8) & 0xff, (val >> 16) & 0xff, (val >> 24) & 0xff);\n    return arr;\n};\n\nexport const hex = (v: number) => {\n    return \"0x\" + v.toString(16);\n};\n\nexport const rid = (v: number) => {\n    const m = [\n        \"DP_0x0\",\n        \"DP_0x4\",\n        \"DP_0x8\",\n        \"DP_0xC\",\n        \"AP_0x0\",\n        \"AP_0x4\",\n        \"AP_0x8\",\n        \"AP_0xC\",\n    ];\n\n    return m[v] || \"?\";\n};\n\nexport const bank = (addr: number) => {\n    const APBANKSEL = 0x000000f0;\n    return (addr & APBANKSEL) | (addr & 0xff000000);\n};\n\nexport const apReg = (r: ApReg, mode: DapVal) => {\n    const v = r | mode | DapVal.AP_ACC;\n    return (4 + ((v & 0x0c) >> 2)) as Reg;\n};\n\nexport const bufToUint32Array = (buf: Uint8Array) => {\n    assert((buf.length & 3) === 0);\n\n    const r: number[] = [];\n\n    if (!buf.length) {\n        return r;\n    }\n\n    r[buf.length / 4 - 1] = 0;\n\n    for (let i = 0; i < r.length; ++i) {\n        r[i] = readUInt32LE(buf, i << 2);\n    }\n\n    return r;\n};\n\nexport const assert = (cond: any) => {\n    if (!cond) {\n        throw new Error(\"assertion failed\");\n    }\n};\n\nexport const regRequest = (regId: number, isWrite = false) => {\n    let request = !isWrite ? DapVal.READ : DapVal.WRITE;\n\n    if (regId < 4) {\n        request |= DapVal.DP_ACC;\n    } else {\n        request |= DapVal.AP_ACC;\n    }\n\n    request |= (regId & 3) << 2;\n\n    return request;\n};\n\nexport const hexBytes = (bytes: number[]) => {\n    let chk = 0;\n    let r = \":\";\n\n    bytes.forEach(b => chk += b);\n    bytes.push((-chk) & 0xff);\n    bytes.forEach(b => r += (\"0\" + b.toString(16)).slice(-2));\n\n    return r.toUpperCase();\n};\n\nexport const hex2bin = (hexstr: string) => {\n    const array = new Uint8Array(hexstr.length / 2);\n\n    for (let i = 0; i < hexstr.length / 2; i++) {\n        array[i] = parseInt(hexstr.substr(2 * i, 2), 16);\n    }\n\n    return array;\n};\n"],"sourceRoot":"../src"}