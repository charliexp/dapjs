{"version":3,"sources":["cortex/prepared.ts"],"names":[],"mappings":";;;;;;;;;;AACA,iDAAyD;AAIzD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GA8CG;AACH;IAGI,YAAY,GAAQ;QAChB,IAAI,CAAC,GAAG,GAAG,IAAI,gCAAqB,CAAC,GAAG,CAAC,CAAC;IAC9C,CAAC;IAED;;;;;OAKG;IACI,iBAAiB,CAAC,EAAa,EAAE,GAAW;QAC/C,IAAI,CAAC,GAAG,CAAC,OAAO,yBAAyB,GAAG,CAAC,CAAC;QAC9C,IAAI,CAAC,GAAG,CAAC,OAAO,yBAAyB,EAAE,2BAAgC,CAAC,CAAC;IACjF,CAAC;IAED;;OAEG;IACI,IAAI;QACP,IAAI,CAAC,GAAG,CAAC,OAAO,yBAEZ,4CAAoD,iBAA0B,CACjF,CAAC;IACN,CAAC;IAED;;OAEG;IACI,MAAM;QACT,IAAI,CAAC,GAAG,CAAC,OAAO,wBAEZ,wCAA0D,sBAA+B,CAC5F,CAAC;IACN,CAAC;IAED;;OAEG;IACU,EAAE;;YACX,MAAM,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC;QACxB,CAAC;KAAA;CACJ;AA5CD,wDA4CC","file":"prepared.js","sourcesContent":["import {DAP} from \"../dap/dap\";\nimport {PreparedMemoryCommand} from \"../memory/prepared\";\n\nimport {CortexReg, CortexSpecialReg} from \"./constants\";\n\n/**\n * # Cortex M: Prepared Command\n *\n * Allows batching of Cortex M-related commands, such as writing to a register,\n * halting and resuming the core.\n *\n * ## Example\n *\n * When preparing the sequence of commands, we can use the same API to prepare\n * a command as we would to execute them immediately.\n *\n * ```typescript\n * // Note that only the .go method is asynchronous.\n *\n * const prep = core.prepareCommand();\n * prep.writeCoreRegister(CortexReg.R0, 0x1000);\n * prep.writeCoreRegister(CortexReg.R1, 0x0);\n * prep.writeCoreRegister(CortexReg.PC, 0x2000000);\n * prep.resume();\n * ```\n *\n * We can then execute them as efficiently as possible by combining them together\n * and executing them like so.\n *\n * ```typescript\n * await prep.go();\n * ```\n *\n * The code above is equivalent to the following _non-prepared_ command:\n *\n * ```typescript\n * await core.writeCoreRegister(CortexReg.R0, 0x1000);\n * await core.writeCoreRegister(CortexReg.R1, 0x0);\n * await core.writeCoreRegister(CortexReg.PC, 0x2000000);\n * await core.resume();\n * ```\n *\n * Since the batched version of this code avoids making three round-trips to the\n * target, we are able to significantly improve performance. This is especially\n * noticable when uploading a binary to flash memory, where are large number of\n * repetetive commands are being used.\n *\n * ## Explanation\n *\n * For a detailed explanation of why prepared commands are used in DAP.js, see the\n * documentation for `PreparedDapCommand`.\n */\nexport class PreparedCortexMCommand {\n    private cmd: PreparedMemoryCommand;\n\n    constructor(dap: DAP) {\n        this.cmd = new PreparedMemoryCommand(dap);\n    }\n\n    /**\n     * Schedule a 32-bit integer to be written to a core register.\n     *\n     * @param no Core register to be written.\n     * @param val Value to write.\n     */\n    public writeCoreRegister(no: CortexReg, val: number) {\n        this.cmd.write32(CortexSpecialReg.DCRDR, val);\n        this.cmd.write32(CortexSpecialReg.DCRSR, no | CortexSpecialReg.DCRSR_REGWnR);\n    }\n\n    /**\n     * Schedule a halt command to be written to the CPU.\n     */\n    public halt() {\n        this.cmd.write32(\n            CortexSpecialReg.DHCSR,\n            CortexSpecialReg.DBGKEY | CortexSpecialReg.C_DEBUGEN | CortexSpecialReg.C_HALT,\n        );\n    }\n\n    /**\n     * Schedule a resume command to be written to the CPU.\n     */\n    public resume() {\n        this.cmd.write32(\n            CortexSpecialReg.DFSR,\n            CortexSpecialReg.DFSR_DWTTRAP | CortexSpecialReg.DFSR_BKPT | CortexSpecialReg.DFSR_HALTED,\n        );\n    }\n\n    /**\n     * Execute all scheduled commands.\n     */\n    public async go() {\n        await this.cmd.go();\n    }\n}\n"],"sourceRoot":"../../src"}