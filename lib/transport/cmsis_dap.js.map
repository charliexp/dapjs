{"version":3,"sources":["transport/cmsis_dap.ts"],"names":[],"mappings":"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","file":"cmsis_dap.js","sourcesContent":["import {addInt32} from \"../util\";\nimport {IHID} from \"./hid\";\n\nexport const enum DapCmd {\n    DAP_INFO = 0x00,\n    DAP_LED = 0x01,\n    DAP_CONNECT = 0x02,\n    DAP_DISCONNECT = 0x03,\n    DAP_TRANSFER_CONFIGURE = 0x04,\n    DAP_TRANSFER = 0x05,\n    DAP_TRANSFER_BLOCK = 0x06,\n    DAP_TRANSFER_ABORT = 0x07,\n    DAP_WRITE_ABORT = 0x08,\n    DAP_DELAY = 0x09,\n    DAP_RESET_TARGET = 0x0a,\n    DAP_SWJ_PINS = 0x10,\n    DAP_SWJ_CLOCK = 0x11,\n    DAP_SWJ_SEQUENCE = 0x12,\n    DAP_SWD_CONFIGURE = 0x13,\n    DAP_JTAG_SEQUENCE = 0x14,\n    DAP_JTAG_CONFIGURE = 0x15,\n    DAP_JTAG_IDCODE = 0x16,\n    DAP_VENDOR0 = 0x80,\n}\n\nconst enum Info {\n    VENDOR_ID = 0x01,\n    PRODUCT_ID = 0x02,\n    SERIAL_NUMBER = 0x03,\n    CMSIS_DAP_FW_VERSION = 0x04,\n    TARGET_DEVICE_VENDOR = 0x05,\n    TARGET_DEVICE_NAME = 0x06,\n    CAPABILITIES = 0xf0,\n    PACKET_COUNT = 0xfe,\n    PACKET_SIZE = 0xff,\n}\n\nexport class CMSISDAP {\n    private hid: IHID;\n    // private maxSent = 1;\n\n    constructor(hid: IHID) {\n        this.hid = hid;\n    }\n\n    public async resetTarget() {\n        return this.cmdNums(DapCmd.DAP_RESET_TARGET, []);\n    }\n\n    public async disconnect() {\n        return this.cmdNums(DapCmd.DAP_DISCONNECT, []);\n    }\n\n    public async cmdNums(op: DapCmd, data: number[]) {\n        data.unshift(op);\n\n        const buf = await this.send(data);\n\n        if (buf[0] !== op) {\n            throw new Error(`Bad response for ${op} -> ${buf[0]}`);\n        }\n\n        switch (op) {\n            case DapCmd.DAP_CONNECT:\n            case DapCmd.DAP_INFO:\n            case DapCmd.DAP_TRANSFER:\n            case DapCmd.DAP_TRANSFER_BLOCK:\n                break;\n            default:\n                if (buf[1] !== 0) {\n                    throw new Error(`Bad status for ${op} -> ${buf[1]}`);\n                }\n        }\n\n        return buf;\n    }\n\n    public async connect() {\n        const v = await this.info(Info.PACKET_COUNT);\n\n        if (v as number) {\n            // this.maxSent = v as number;\n        } else {\n            throw new Error(\"DAP_INFO returned invalid packet count.\");\n        }\n\n        await this.cmdNums(DapCmd.DAP_SWJ_CLOCK, addInt32(null, 10000000));\n\n        const buf = await this.cmdNums(DapCmd.DAP_CONNECT, [0]);\n        if (buf[1] !== 1) {\n            throw new Error(\"SWD mode not enabled.\");\n        }\n\n        await this.cmdNums(DapCmd.DAP_SWJ_CLOCK, addInt32(null, 10000000));\n        await this.cmdNums(DapCmd.DAP_TRANSFER_CONFIGURE, [0, 0x50, 0, 0, 0]);\n        await this.cmdNums(DapCmd.DAP_SWD_CONFIGURE, [0]);\n        await this.jtagToSwd();\n    }\n\n    private async jtagToSwd() {\n        const arrs = [\n            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n            [16, 0x9e, 0xe7],\n            [56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff],\n            [8, 0x00],\n        ];\n\n        for (const arr of arrs) {\n            await this.swjSequence(arr);\n        }\n    }\n\n    private async swjSequence(data: number[]) {\n        return this.cmdNums(DapCmd.DAP_SWJ_SEQUENCE, data);\n    }\n\n    private async info(id: Info) {\n        const buf = await this.cmdNums(DapCmd.DAP_INFO, [id]);\n\n        if (buf[1] === 0) {\n            return null;\n        }\n\n        switch (id) {\n            case Info.CAPABILITIES:\n            case Info.PACKET_COUNT:\n            case Info.PACKET_SIZE:\n                if (buf[1] === 1) {\n                    return buf[2];\n                } else if (buf[1] === 2) {\n                    return buf[3] << 8 | buf[2];\n                }\n        }\n        return buf.subarray(2, buf[1] + 2 - 1); // .toString(\"utf8\")\n    }\n\n    private async send(command: number[]) {\n        const array = Uint8Array.from(command);\n        await this.hid.write(array.buffer);\n        const response = await this.hid.read();\n        return new Uint8Array(response.buffer);\n    }\n}\n"],"sourceRoot":"../../src"}