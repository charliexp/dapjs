{"version":3,"sources":["targets/FlashTarget.ts"],"names":[],"mappings":"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","file":"FlashTarget.js","sourcesContent":["import {CortexReg} from \"../cortex/constants\";\nimport {CortexM} from \"../cortex/cortex\";\nimport {DAP} from \"../dap/dap\";\nimport {IPlatform} from \"./platform\";\n\nimport {FlashProgram} from \"./FlashProgram\";\n\nimport {K64F} from \"./K64F\";\nimport {NRF51} from \"./NRF51\";\n\n/**\n * Analyzer code blob, from PyOCD. This can be used to compute a table of CRC\n * values. See https://github.com/mbedmicro/pyOCD/tree/master/src/analyzer.\n */\nconst analyzer = new Uint32Array([\n    0x2180468c, 0x2600b5f0, 0x4f2c2501, 0x447f4c2c, 0x1c2b0049, 0x425b4033, 0x40230872, 0x085a4053,\n    0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a,\n    0x4023425b, 0x085a4053, 0x425b402b, 0x40534023, 0x402b085a, 0x4023425b, 0x085a4053, 0x425b402b,\n    0x40534023, 0xc7083601, 0xd1d2428e, 0x2b004663, 0x4663d01f, 0x46b4009e, 0x24ff2701, 0x44844d11,\n    0x1c3a447d, 0x88418803, 0x4351409a, 0xd0122a00, 0x22011856, 0x780b4252, 0x40533101, 0x009b4023,\n    0x0a12595b, 0x42b1405a, 0x43d2d1f5, 0x4560c004, 0x2000d1e7, 0x2200bdf0, 0x46c0e7f8, 0x000000b6,\n    0xedb88320, 0x00000044,\n]);\n\n/**\n * # Flash Target\n *\n * Represents a target device containing a flash region. In rare cases that a\n * target chip only has RAM, uploading a program is as simple as writing a\n * block of data to memory.\n *\n * ## Usage\n *\n * Initialising the `FlashTarget` object is the same as configuring a Cortex-M\n * object, but with an additional parameter for the platform (contains the\n * flashing algorithm and memory layout).\n *\n * ```typescript\n * import {K64F, DAP, FlashTarget} from \"dapjs\";\n *\n * // make sure hid is an object implementing the `IHID` interface.\n * const dap = new DAP(hid);\n * const device = new FlashTarget(dap, K64F);\n * ```\n *\n * Now, we can do all of the operations you'd expect. As usual, these examples\n * work in a function marked `async`. Alternatively, they can be implemented\n * using Promises directly.\n *\n * ```typescript\n * await device.eraseChip();\n *\n * // flash a hex program\n *\n * ```\n */\nexport class FlashTarget extends CortexM {\n    protected platform: IPlatform;\n    private inited: boolean;\n\n    constructor(device: DAP, platform: IPlatform) {\n        super(device);\n\n        this.platform = platform;\n        this.inited = false;\n    }\n\n    /**\n     * Initialise the flash driver on the chip. Must be called before any of the other\n     * flash-related methods.\n     */\n    public async flashInit() {\n        if (this.inited) {\n            return;\n        }\n\n        // reset and halt\n        await this.reset(true);\n\n        // make sure we're in Thumb mode.\n        await this.writeCoreRegister(CortexReg.XPSR, 1 << 24);\n        await this.writeCoreRegister(CortexReg.R9, this.platform.flashAlgo.staticBase);\n\n        // upload analyzer\n        if (this.platform.flashAlgo.analyzerSupported) {\n            await this.memory.writeBlock(this.platform.flashAlgo.analyzerAddress, analyzer);\n        }\n\n        const result = await this.runCode(\n            this.platform.flashAlgo.instructions,\n            this.platform.flashAlgo.loadAddress,\n            this.platform.flashAlgo.pcInit,\n            this.platform.flashAlgo.loadAddress + 1,\n            this.platform.flashAlgo.stackPointer,\n            true,\n            0, 0, 0, 0,\n        );\n\n        this.inited = true;\n        return result;\n    }\n\n    /**\n     * Erase _all_ data stored in flash on the chip.\n     */\n    public async eraseChip() {\n        if (!this.inited) {\n            await this.flashInit();\n        }\n\n        const result = await this.runCode(\n            this.platform.flashAlgo.instructions,\n            this.platform.flashAlgo.loadAddress,\n            this.platform.flashAlgo.pcEraseAll,\n            this.platform.flashAlgo.loadAddress + 1,\n            this.platform.flashAlgo.stackPointer,\n            false,\n            0, 0, 0,\n        );\n\n        return result;\n    }\n\n    /**\n     * Flash a contiguous block of data to flash at a specified address.\n     *\n     * @param data Array of 32-bit integers to write to flash.\n     * @param address Memory address in flash to write to.\n     * @param progressCb Callback to keep track of progress through upload (from 0.0 to 1.0)\n     */\n    public async flash(data: Uint32Array, address?: number, progressCb?: (progress: number) => void) {\n        if (!this.inited) {\n            await this.flashInit();\n        }\n\n        const pageSizeWords = this.platform.flashAlgo.pageSize / 4;\n        const bufferAddress = this.platform.flashAlgo.pageBuffers[0];\n        const flashStart = address || this.platform.flashAlgo.flashStart;\n\n        // How far through `data` are we (in bytes)\n        let ptr = 0;\n\n        while (ptr < data.byteLength) {\n            const wordPtr = ptr / 4;\n\n            const pageData = data.subarray(wordPtr, wordPtr + pageSizeWords);\n            const flashAddress = flashStart + ptr;\n\n            await this.memory.writeBlock(bufferAddress, pageData);\n            await this.runCode(\n                this.platform.flashAlgo.instructions,\n                this.platform.flashAlgo.loadAddress,\n                this.platform.flashAlgo.pcProgramPage, // pc\n                this.platform.flashAlgo.loadAddress + 1, // lr\n                this.platform.flashAlgo.stackPointer, // sp\n                /* upload? */\n                false,\n                /* args */\n                flashAddress, this.platform.flashAlgo.pageSize, bufferAddress,\n            );\n\n            if (progressCb) {\n                progressCb(ptr / data.byteLength);\n            }\n            ptr += pageData.byteLength;\n        }\n\n        if (progressCb) {\n            progressCb(1.0);\n        }\n    }\n\n    /**\n     * Upload a program consisting of one or more disjoint sections to flash.\n     *\n     * @param program Program to be uploaded\n     * @param progressCb Callback to receive progress updates (from 0.0 to 1.0)\n     */\n    public async program(program: FlashProgram, progressCb: (progress: number) => void) {\n        await this.flashInit();\n        await this.eraseChip();\n\n        const totalBytes = program.totalByteLength();\n        let cumulativeBytes = 0;\n\n        // const startTime = Date.now();\n\n        for (const section of program.sections) {\n            await this.flash(section.data, section.address, progress => {\n                const sectionBytes = section.data.byteLength * progress;\n                progressCb((cumulativeBytes + sectionBytes) / totalBytes);\n            });\n\n            cumulativeBytes += section.data.byteLength;\n        }\n\n        // const endTime = Date.now();\n        // const elapsedTime = endTime - startTime;\n\n        // const transferRate = totalBytes / elapsedTime; // B/ms == kB/s\n\n        await this.flashUnInit();\n        progressCb(1.0);\n    }\n\n    /**\n     * Un-init the flash algorithm. Commonly, we use this to ensure that the flashing\n     * algorithms are re-uploaded after resets.\n     */\n    public flashUnInit() {\n        this.inited = false;\n    }\n}\n\n/**\n * Map of mbed device codes to platform objects. Can be used by applications\n * to dynamically select flashing algorithm based on the devices connected to\n * the computer.\n *\n * > *TODO:* extend the mbed devices API to include data stored here, so that we can\n * > expand to cover all devices without needing to update DAP.js.\n */\nexport let FlashTargets = new Map<string, IPlatform>();\nFlashTargets.set(\"0240\", new K64F());\nFlashTargets.set(\"9900\", new NRF51());\n"],"sourceRoot":"../../src"}