{"version":3,"sources":["targets/FlashProgram.ts"],"names":[],"mappings":"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","file":"FlashProgram.js","sourcesContent":["import {hex2bin} from \"../util\";\n\nexport class FlashSection {\n    constructor(public address: number, public data: Uint32Array) {\n        /* empty */\n    }\n\n    public toString() {\n        return `${this.data.byteLength} bytes @ ${this.address.toString(16)}`;\n    }\n}\n\n/**\n * # Flash Program\n *\n * Represents a program to be flashed to memory as a series of disjoint sections\n * in memory/flash.\n *\n * ## Usage\n *\n * Use with a hex file is as simple as loading it from disk, and calling `fromIntelHex`.\n *\n * ```typescript\n * const hexFile = \"microbit.hex\";\n * const hexData = fs.readFileSync(hexFile, { encoding: 'utf-8' });\n *\n * const program = FlashProgram.fromIntelHex(hexData);\n * core.program(program, (progress) => {\n *     console.log(`Flash progress: ${progress * 100}%`);\n * });\n * ```\n *\n * When used with a binary file, you must make sure that the file is stored in a\n * Uint32Array, and you must provide a base address for the binary to be written to.\n * The base address is commonly zero.\n */\nexport class FlashProgram {\n\n    constructor(public sections: FlashSection[]) {}\n\n    public static fromIntelHex(hex: string): FlashProgram {\n        const lines = hex.split(/\\n/);\n        let upperAddr = 0;\n\n        let startAddr = 0;\n\n        let current = null;\n        const chunks: FlashSection[] = [];\n\n        for (let i = 0; i < lines.length; i++) {\n            const line = lines[i];\n\n            if (line.substr(0, 1) !== \":\") {\n                throw new Error(`Invaild line in hex file: ${i + 1}`);\n            } else {\n                const length = parseInt(line.substr(1, 2), 16);\n                const addr = upperAddr + parseInt(line.substr(3, 4), 16);\n                const fieldType = parseInt(line.substr(7, 2), 16);\n                const data = line.substr(9, length * 2);\n\n                if (fieldType === 0x00) {\n                    if (current && addr !== startAddr + (current.length / 2)) {\n                        // non-contiguous\n                        const sectionData = hex2bin(current);\n                        chunks.push(new FlashSection(startAddr, new Uint32Array(sectionData.buffer)));\n\n                        current = \"\";\n                        startAddr = addr;\n                    } else if (!current) {\n                        startAddr = addr;\n                        current = \"\";\n                    }\n\n                    current += data;\n                } else if (fieldType === 0x01) {\n                    // EOF\n                    break;\n                } else if (fieldType === 0x02) {\n                    // extended segment address record\n                    upperAddr = parseInt(data, 16) << 4;\n                } else if (fieldType === 0x04) {\n                    // extended linear address record\n                    upperAddr = parseInt(data, 16) << 16;\n                }\n            }\n        }\n\n        return new FlashProgram(chunks);\n    }\n\n    public static fromBinary(addr: number, bin: Uint32Array) {\n        return new FlashProgram([new FlashSection(addr, bin)]);\n    }\n\n    public totalByteLength() {\n        return this.sections.map(s => s.data.byteLength).reduce((x, y) => x + y);\n    }\n\n    public toString() {\n        return this.sections.toString();\n    }\n}\n"],"sourceRoot":"../../src"}