{"version":3,"sources":["debug/breakpoint.ts"],"names":[],"mappings":";;;;;;;;;;AASA;IACI,YAA4B,OAAe,EAAmB,MAAe,EAAkB,IAAY;QAA/E,YAAO,GAAP,OAAO,CAAQ;QAAmB,WAAM,GAAN,MAAM,CAAS;QAAkB,SAAI,GAAJ,IAAI,CAAQ;IAAI,CAAC;IAEnG,GAAG;;YACZ,6BAA6B;YAC7B,MAAM,OAAO,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;YAClD,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,IAAI,GAAG,UAAU,GAAG,OAAO,GAAG,CAAC,CAAC,CAAC;QACzF,CAAC;KAAA;IAEY,KAAK;;YACd,+BAA+B;YAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC;QACtD,CAAC;KAAA;CACJ;AAbD,oCAaC;AAED;IAKI,YAA6B,MAAe,EAAkB,IAAY;QAA7C,WAAM,GAAN,MAAM,CAAS;QAAkB,SAAI,GAAJ,IAAI,CAAQ;IAAK,CAAC;IAEnE,GAAG;;YACZ,uCAAuC;YACvC,IAAI,CAAC,WAAW,GAAG,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9D,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,gBAAgB,CAAC,CAAC;QAC/E,CAAC;KAAA;IAEY,KAAK;;YACd,+BAA+B;YAC/B,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC;QAClE,CAAC;KAAA;;AAfc,6BAAgB,GAAW,MAAM,CAAC;AADrD,oCAiBC","file":"breakpoint.js","sourcesContent":["import {CortexM} from \"../cortex/cortex\";\n\nexport interface IBreakpoint {\n    set(): Promise<void>;\n    clear(): Promise<void>;\n}\n\nexport type DisabledBreakpoint = number;\n\nexport class HWBreakpoint implements IBreakpoint {\n    constructor(public readonly regAddr: number, private readonly parent: CortexM, public readonly addr: number) { }\n\n    public async set() {\n        /* set hardware breakpoint */\n        const bpMatch = ((this.addr & 0x2) ? 2 : 1) << 30;\n        await this.parent.memory.write32(this.regAddr, this.addr & 0x1ffffffc | bpMatch | 1);\n    }\n\n    public async clear() {\n        /* clear hardware breakpoint */\n        await this.parent.memory.write32(this.regAddr, 0);\n    }\n}\n\nexport class SWBreakpoint implements IBreakpoint {\n    private static BKPT_INSTRUCTION: number = 0xbe00;\n\n    private instruction: number;\n\n    constructor(private readonly parent: CortexM, public readonly addr: number) {  }\n\n    public async set() {\n        // read the instruction from the CPU...\n        this.instruction = await this.parent.memory.read16(this.addr);\n        await this.parent.memory.write16(this.addr, SWBreakpoint.BKPT_INSTRUCTION);\n    }\n\n    public async clear() {\n        /* clear hardware breakpoint */\n        await this.parent.memory.write16(this.addr, this.instruction);\n    }\n}\n"],"sourceRoot":"../../src"}