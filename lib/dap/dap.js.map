{"version":3,"sources":["dap/dap.ts"],"names":[],"mappings":"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","file":"dap.js","sourcesContent":["import {ApReg, DapRegisters, DapVal, Reg} from \"./constants\";\nimport {PreparedDapCommand} from \"./prepared\";\n\nimport {CMSISDAP, DapCmd} from \"../transport/cmsis_dap\";\nimport {IHID} from \"../transport/hid\";\nimport {addInt32, apReg, assert, bank, delay, readUInt32LE, regRequest} from \"../util\";\n\nexport class DAP {\n    public dap: CMSISDAP;\n\n    private dpSelect: number;\n    private csw: number;\n    // private idcode: number;\n\n    constructor(private device: IHID) {\n        this.dap = new CMSISDAP(device);\n    }\n\n    public async reconnect() {\n        await this.dap.disconnect();\n        await delay(100);\n        await this.init();\n    }\n\n    public async init() {\n        await this.dap.connect();\n\n        await this.readDp(Reg.IDCODE);\n        // const n = await this.readDp(Reg.IDCODE);\n        // this.idcode = n;\n\n        let prep = this.prepareCommand();\n        prep.writeReg(Reg.DP_0x0, 1 << 2); // clear sticky error\n        prep.writeDp(Reg.SELECT, 0);\n        prep.writeDp(Reg.CTRL_STAT, DapRegisters.CSYSPWRUPREQ | DapRegisters.CDBGPWRUPREQ);\n\n        const m = DapRegisters.CDBGPWRUPACK | DapRegisters.CSYSPWRUPACK;\n        prep.readDp(Reg.CTRL_STAT);\n        let v = (await prep.go())[0];\n\n        while ((v & m) !== m) {\n            v = await this.readDp(Reg.CTRL_STAT);\n        }\n\n        prep = this.prepareCommand();\n        prep.writeDp(\n            Reg.CTRL_STAT,\n            (DapRegisters.CSYSPWRUPREQ |\n            DapRegisters.CDBGPWRUPREQ |\n            DapRegisters.TRNNORMAL |\n            DapRegisters.MASKLANE),\n        );\n        prep.writeDp(Reg.SELECT, 0);\n        prep.readAp(ApReg.IDR);\n\n        await prep.go();\n    }\n\n    public async writeReg(regId: Reg, val: number) {\n        return this.regOp(regId, val);\n    }\n\n    public async readReg(regId: Reg) {\n        const buf = await this.regOp(regId, null);\n        const v = readUInt32LE(buf, 3);\n\n        return v;\n    }\n\n    public prepareCommand() {\n        return new PreparedDapCommand(this.dap);\n    }\n\n    public async readDp(addr: Reg) {\n        return this.readReg(addr);\n    }\n\n    public async readAp(addr: ApReg) {\n        const prep = this.prepareCommand();\n        prep.writeDp(Reg.SELECT, bank(addr));\n        prep.readReg(apReg(addr, DapVal.READ));\n\n        return (await prep.go())[0];\n    }\n\n    public writeDp(addr: Reg, data: number) {\n        if (addr === Reg.SELECT) {\n            if (data === this.dpSelect) {\n                return Promise.resolve();\n            }\n\n            this.dpSelect = data;\n        }\n\n        return this.writeReg(addr, data);\n    }\n\n    public async writeAp(addr: ApReg, data: number) {\n        if (addr === ApReg.CSW) {\n            if (data === this.csw) {\n                return Promise.resolve();\n            }\n\n            this.csw = data;\n        }\n\n        const prep = this.prepareCommand();\n        prep.writeDp(Reg.SELECT, bank(addr));\n        prep.writeReg(apReg(addr, DapVal.WRITE), data);\n\n        await prep.go();\n    }\n\n    public async close() {\n        return this.device.close();\n    }\n\n    public async readRegRepeat(regId: Reg, cnt: number) {\n        assert(cnt <= 15);\n\n        const request = regRequest(regId);\n        const sendargs = [0, cnt];\n\n        for (let i = 0; i < cnt; ++i) {\n            sendargs.push(request);\n        }\n\n        const buf = await this.dap.cmdNums(DapCmd.DAP_TRANSFER, sendargs);\n\n        if (buf[1] !== cnt) {\n            throw new Error((\"(many) Bad #trans \" + buf[1]));\n        } else if (buf[2] !== 1) {\n            throw new Error((\"(many) Bad transfer status \" + buf[2]));\n        }\n\n        return buf.subarray(3, 3 + cnt * 4);\n    }\n\n    public async writeRegRepeat(regId: Reg, data: Uint32Array) {\n        const remainingLength = 64 - 1 - 1 - 2 - 1; // 14\n        assert(data.length <= remainingLength / 4);\n\n        /*\n            BYTE | BYTE *****| SHORT**********| BYTE *************| WORD *********|\n          > 0x06 | DAP Index | Transfer Count | Transfer Request  | Transfer Data |\n                 |***********|****************|*******************|+++++++++++++++|\n        */\n\n        const request = regRequest(regId, true);\n        const sendargs = [0, data.length, 0, request];\n\n        data.forEach(d => {\n            // separate d into bytes\n            addInt32(sendargs, d);\n        });\n\n        const buf = await this.dap.cmdNums(DapCmd.DAP_TRANSFER_BLOCK, sendargs);\n\n        if (buf[3] !== 1) {\n            throw new Error((\"(many-wr) Bad transfer status \" + buf[2]));\n        }\n    }\n\n    private async regOp(regId: Reg, val: number) {\n        const request = regRequest(regId, val !== null);\n        const sendargs = [0, 1, request];\n\n        if (val !== null) {\n            addInt32(sendargs, val);\n        }\n\n        const buf = await this.dap.cmdNums(DapCmd.DAP_TRANSFER, sendargs);\n\n        if (buf[1] !== 1) {\n            throw new Error((\"Bad #trans \" + buf[1]));\n        } else if (buf[2] !== 1) {\n            if (buf[2] === 2) {\n                throw new Error((\"Transfer wait\"));\n            }\n            throw new Error((\"Bad transfer status \" + buf[2]));\n        }\n\n        return buf;\n    }\n}\n"],"sourceRoot":"../../src"}